{"version":3,"sources":["../../../src/js/fields/ArrayField.jsx"],"names":["Element","Scroll","scroller","ArrayField","props","uiSchema","viewField","Error","idSchema","$id","state","editing","formData","map","onItemChange","bind","handleAdd","handleEdit","handleUpdate","handleRemove","scrollToTop","scrollToRow","schema","registry","minItems","length","onChange","Array","fill","additionalItems","undefined","definitions","nextProps","nextState","indexToChange","value","newItems","index","items","setTimeout","scrollTo","window","Forms","scroll","duration","delay","smooth","offset","id","status","setState","errorSchema","touched","formContext","setTouched","lastIndex","newEditing","val","editingState","reviewMode","newState","concat","newFormData","indexToRemove","filter","disabled","readonly","onBlur","fields","TitleField","SchemaField","uiOptions","ViewField","title","hideTitle","description","textDescription","DescriptionField","isReviewMode","hasTitleOrDescription","containerClassNames","item","itemSchema","getItemSchema","itemIdPrefix","itemIdSchema","isLast","isEditing","notLastOrMultipleRows","itemName","React","Component","propTypes","PropTypes","object","isRequired","requiredSchema","func","array","bool","shape","widgets","objectOf","oneOfType"],"mappings":"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","file":"ArrayField.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport _ from 'lodash/fp';\nimport classNames from 'classnames';\nimport Scroll from 'react-scroll';\n\nimport {\n  toIdSchema,\n  getDefaultFormState,\n  deepEquals\n} from '@department-of-veterans-affairs/react-jsonschema-form/lib/utils';\n\nimport { scrollToFirstError } from '../utilities/ui';\nimport { setArrayRecordTouched } from '../helpers';\nimport { errorSchemaIsValid } from '../validation';\n\nconst Element = Scroll.Element;\nconst scroller = Scroll.scroller;\n\n/* Non-review growable table (array) field */\nexport default class ArrayField extends React.Component {\n  constructor(props) {\n    super(props);\n    // Throw an error if there’s no viewField (should be React component)\n    if (typeof this.props.uiSchema['ui:options'].viewField !== 'function') {\n      throw new Error(`No viewField found in uiSchema for ArrayField ${this.props.idSchema.$id}.`);\n    }\n\n    /*\n     * We’re keeping the editing state in local state because it’s easier to manage and\n     * doesn’t need to persist from page to page\n     */\n\n    this.state = {\n      editing: props.formData ? props.formData.map(() => false) : [true]\n    };\n\n    this.onItemChange = this.onItemChange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.scrollToTop = this.scrollToTop.bind(this);\n    this.scrollToRow = this.scrollToRow.bind(this);\n  }\n\n  // This fills in an empty item in the array if it has minItems set\n  // so that schema validation runs against the fields in the first item\n  // in the array. This shouldn’t be necessary, but there’s a fix in rjsf\n  // that has not been released yet\n  componentDidMount() {\n    const { schema, formData = [], registry } = this.props;\n    if (schema.minItems > 0 && formData.length === 0) {\n      this.props.onChange(Array(schema.minItems).fill(\n        getDefaultFormState(schema.additionalItems, undefined, registry.definitions)\n      ));\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !deepEquals(this.props, nextProps) || nextState !== this.state;\n  }\n\n  onItemChange(indexToChange, value) {\n    const newItems = _.set(indexToChange, value, this.props.formData || []);\n    this.props.onChange(newItems);\n  }\n\n  getItemSchema(index) {\n    const schema = this.props.schema;\n    if (schema.items.length > index) {\n      return schema.items[index];\n    }\n\n    return schema.additionalItems;\n  }\n\n  scrollToTop() {\n    setTimeout(() => {\n      scroller.scrollTo(`topOfTable_${this.props.idSchema.$id}`, window.Forms.scroll || {\n        duration: 500,\n        delay: 0,\n        smooth: true,\n        offset: -60\n      });\n    }, 100);\n  }\n\n  scrollToRow(id) {\n    setTimeout(() => {\n      scroller.scrollTo(`table_${id}`, window.Forms.scroll || {\n        duration: 500,\n        delay: 0,\n        smooth: true,\n        offset: 0\n      });\n    }, 100);\n  }\n\n  /*\n   * Clicking edit on an item that’s not last and so is in view mode\n   */\n  handleEdit(index, status = true) {\n    this.setState(_.set(['editing', index], status, this.state), () => {\n      this.scrollToRow(`${this.props.idSchema.$id}_${index}`);\n    });\n  }\n\n  /*\n   * Clicking Update on an item that’s not last and is in edit mode\n   */\n  handleUpdate(index) {\n    if (errorSchemaIsValid(this.props.errorSchema[index])) {\n      this.setState(_.set(['editing', index], false, this.state), () => {\n        this.scrollToTop();\n      });\n    } else {\n      // Set all the fields for this item as touched, so we show errors\n      const touched = setArrayRecordTouched(this.props.idSchema.$id, index);\n      this.props.formContext.setTouched(touched, () => {\n        scrollToFirstError();\n      });\n    }\n  }\n\n  /*\n   * Clicking Add Another\n   */\n  handleAdd() {\n    const lastIndex = this.props.formData.length - 1;\n    if (errorSchemaIsValid(this.props.errorSchema[lastIndex])) {\n      // When we add another, we want to change the editing state of the currently\n      // last item, but not ones above it\n      const newEditing = this.state.editing.map((val, index) => {\n        return (index + 1) === this.state.editing.length\n          ? false\n          : val;\n      });\n      const editingState = this.props.uiSchema['ui:options'].reviewMode;\n      const newState = _.assign(this.state, {\n        editing: newEditing.concat(!!editingState)\n      });\n      this.setState(newState, () => {\n        const newFormData = this.props.formData.concat(getDefaultFormState(this.props.schema.additionalItems, undefined, this.props.registry.definitions) || {});\n        this.props.onChange(newFormData);\n        this.scrollToRow(`${this.props.idSchema.$id}_${lastIndex + 1}`);\n      });\n    } else {\n      const touched = setArrayRecordTouched(this.props.idSchema.$id, lastIndex);\n      this.props.formContext.setTouched(touched, () => {\n        scrollToFirstError();\n      });\n    }\n  }\n\n  /*\n   * Clicking Remove on an item in edit mode\n   */\n  handleRemove(indexToRemove) {\n    const newItems = this.props.formData.filter((val, index) => index !== indexToRemove);\n    const newState = _.assign(this.state, {\n      editing: this.state.editing.filter((val, index) => index !== indexToRemove),\n    });\n    this.props.onChange(newItems);\n    this.setState(newState, () => {\n      this.scrollToTop();\n    });\n  }\n\n  render() {\n    const {\n      uiSchema,\n      errorSchema,\n      idSchema,\n      formData,\n      disabled,\n      readonly,\n      registry,\n      formContext,\n      onBlur,\n      schema\n    } = this.props;\n    const definitions = registry.definitions;\n    const { TitleField, SchemaField } = registry.fields;\n\n    const uiOptions = uiSchema['ui:options'] || {};\n    const ViewField = uiOptions.viewField;\n    const title = uiSchema['ui:title'] || schema.title;\n    const hideTitle = !!uiOptions.title;\n    const description = uiSchema['ui:description'];\n    const textDescription = typeof description === 'string' ? description : null;\n    const DescriptionField = typeof description === 'function'\n      ? uiSchema['ui:description']\n      : null;\n    const isReviewMode = uiSchema['ui:options'].reviewMode;\n    const hasTitleOrDescription = (!!title && !hideTitle) || !!description;\n\n    // if we have form data, use that, otherwise use an array with a single default object\n    const items = (formData && formData.length)\n      ? formData\n      : [getDefaultFormState(schema, undefined, registry.definitions)];\n\n    const containerClassNames = classNames({\n      'schemaform-field-container': true,\n      'schemaform-block': hasTitleOrDescription\n    });\n\n    return (\n      <div className={containerClassNames}>\n        {hasTitleOrDescription && <div className=\"schemaform-block-header\">\n          {title && !hideTitle\n            ? <TitleField\n              id={`${idSchema.$id}__title`}\n              title={title}\n              formContext={formContext}/> : null}\n          {textDescription && <p>{textDescription}</p>}\n          {DescriptionField && <DescriptionField options={uiSchema['ui:options']}/>}\n          {!textDescription && !DescriptionField && description}\n        </div>}\n        <div className=\"va-growable\">\n          <Element name={`topOfTable_${idSchema.$id}`}/>\n          {items.map((item, index) => {\n            // This is largely copied from the default ArrayField\n            const itemSchema = this.getItemSchema(index);\n            const itemIdPrefix = `${idSchema.$id}_${index}`;\n            const itemIdSchema = toIdSchema(itemSchema, itemIdPrefix, definitions);\n            const isLast = items.length === (index + 1);\n            const isEditing = this.state.editing[index];\n            const notLastOrMultipleRows = !isLast || items.length > 1;\n\n            if (isReviewMode ? isEditing : isLast || isEditing) {\n              return (\n                <div key={index} className={notLastOrMultipleRows ? 'va-growable-background' : null}>\n                  <Element name={`table_${itemIdPrefix}`}/>\n                  <div className=\"row small-collapse\">\n                    <div className=\"small-12 columns va-growable-expanded\">\n                      {isLast && items.length > 1 && uiSchema['ui:options'].itemName\n                        ? <h5>New {uiSchema['ui:options'].itemName}</h5>\n                        : null}\n                      <div className=\"input-section\">\n                        <SchemaField key={index}\n                          schema={itemSchema}\n                          uiSchema={uiSchema.items}\n                          errorSchema={errorSchema ? errorSchema[index] : undefined}\n                          idSchema={itemIdSchema}\n                          formData={item}\n                          onChange={(value) => this.onItemChange(index, value)}\n                          onBlur={onBlur}\n                          registry={this.props.registry}\n                          required={false}\n                          disabled={disabled}\n                          readonly={readonly}/>\n                      </div>\n                      {notLastOrMultipleRows &&\n                        <div className=\"row small-collapse\">\n                          <div className=\"small-6 left columns\">\n                            {!isLast && <button className=\"float-left\" onClick={() => this.handleUpdate(index)}>Update</button>}\n                          </div>\n                          <div className=\"small-6 right columns\">\n                            <button className=\"usa-button-secondary float-right\" type=\"button\" onClick={() => this.handleRemove(index)}>Remove</button>\n                          </div>\n                        </div>}\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n            return (\n              <div key={index} className=\"va-growable-background\">\n                <div className=\"row small-collapse\">\n                  <div className=\"small-9 columns\">\n                    <ViewField\n                      formData={item}\n                      onEdit={() => this.handleEdit(index)}/>\n                  </div>\n                  <div className=\"small-3 columns\">\n                    <button className=\"usa-button-secondary float-right\" onClick={() => this.handleEdit(index)}>Edit</button>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n          <button\n            type=\"button\"\n            className={classNames(\n              'usa-button-secondary',\n              'va-growable-add-btn',\n              {\n                'usa-button-disabled': !this.props.formData\n              }\n            )}\n            disabled={!this.props.formData}\n            onClick={this.handleAdd}>\n            Add Another {uiOptions.itemName}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nArrayField.propTypes = {\n  schema: PropTypes.object.isRequired,\n  uiSchema: PropTypes.object,\n  errorSchema: PropTypes.object,\n  requiredSchema: PropTypes.object,\n  idSchema: PropTypes.object,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  formData: PropTypes.array,\n  disabled: PropTypes.bool,\n  readonly: PropTypes.bool,\n  registry: PropTypes.shape({\n    widgets: PropTypes.objectOf(PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.object,\n    ])).isRequired,\n    fields: PropTypes.objectOf(PropTypes.func).isRequired,\n    definitions: PropTypes.object.isRequired,\n    formContext: PropTypes.object.isRequired,\n  })\n};\n"]}