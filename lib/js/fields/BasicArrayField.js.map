{"version":3,"sources":["../../../src/js/fields/BasicArrayField.jsx"],"names":["Element","Scroll","BasicArrayField","shouldComponentUpdate","nextProps","nextState","props","state","onItemChange","indexToChange","value","newItems","formData","onChange","getItemSchema","index","schema","items","uiSchema","errorSchema","idSchema","disabled","readonly","registry","formContext","onBlur","definitions","fields","TitleField","SchemaField","title","hideTitle","description","textDescription","DescriptionField","hasTitleOrDescription","length","undefined","containerClassNames","$id","map","item","itemSchema","itemIdPrefix","itemIdSchema","React","Component","propTypes","PropTypes","object","isRequired","requiredSchema","func","array","bool","shape","widgets","objectOf","oneOfType"],"mappings":"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","file":"BasicArrayField.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport _ from 'lodash/fp';\nimport classNames from 'classnames';\nimport Scroll from 'react-scroll';\n\nimport {\n  toIdSchema,\n  getDefaultFormState,\n  deepEquals\n} from '@department-of-veterans-affairs/react-jsonschema-form/lib/utils';\n\nconst Element = Scroll.Element;\n\nclass BasicArrayField extends React.Component {\n  shouldComponentUpdate = (nextProps, nextState) => {\n    return !deepEquals(this.props, nextProps) || nextState !== this.state;\n  }\n\n  onItemChange = (indexToChange, value) => {\n    const newItems = _.set(indexToChange, value, this.props.formData || []);\n    this.props.onChange(newItems);\n  }\n\n  getItemSchema = (index) => {\n    return this.props.schema.items[index];\n  }\n\n  render() {\n    const {\n      uiSchema,\n      errorSchema,\n      idSchema,\n      formData,\n      disabled,\n      readonly,\n      registry,\n      formContext,\n      onBlur,\n      schema\n    } = this.props;\n    const definitions = registry.definitions;\n    const { TitleField, SchemaField } = registry.fields;\n\n    const title = uiSchema['ui:title'] || schema.title;\n    const hideTitle = !!_.get(['ui:options', 'hideTitle'], uiSchema);\n    const description = uiSchema['ui:description'];\n    const textDescription = typeof description === 'string' ? description : null;\n    const DescriptionField = typeof description === 'function'\n      ? uiSchema['ui:description']\n      : null;\n    const hasTitleOrDescription = (!!title && !hideTitle) || !!description;\n\n    // if we have form data, use that, otherwise use an array with a single default object\n    const items = (formData && formData.length)\n      ? formData\n      : [getDefaultFormState(schema, undefined, registry.definitions)];\n\n    const containerClassNames = classNames({\n      'schemaform-field-container': true,\n      'schemaform-block': hasTitleOrDescription\n    });\n\n\n    return (\n      <div className={containerClassNames}>\n        {hasTitleOrDescription && <div className=\"schemaform-block-header\">\n          {title && !hideTitle\n            ? <TitleField\n              id={`${idSchema.$id}__title`}\n              title={title}\n              formContext={formContext}/> : null}\n          {textDescription && <p>{textDescription}</p>}\n          {DescriptionField && <DescriptionField options={uiSchema['ui:options']}/>}\n          {!textDescription && !DescriptionField && description}\n        </div>}\n        <div>\n          {items.map((item, index) => {\n            const itemSchema = this.getItemSchema(index);\n            const itemIdPrefix = `${idSchema.$id}_${index}`;\n            const itemIdSchema = toIdSchema(itemSchema, itemIdPrefix, definitions);\n\n            return (\n              <div key={index}>\n                <Element name={`table_${itemIdPrefix}`}/>\n                <div className=\"row small-collapse\">\n                  <div className=\"small-12 columns\">\n                    <SchemaField key={index}\n                      schema={itemSchema}\n                      uiSchema={uiSchema.items}\n                      errorSchema={errorSchema ? errorSchema[index] : undefined}\n                      idSchema={itemIdSchema}\n                      formData={item}\n                      onChange={(value) => this.onItemChange(index, value)}\n                      onBlur={onBlur}\n                      registry={this.props.registry}\n                      required={false}\n                      disabled={disabled}\n                      readonly={readonly}/>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nBasicArrayField.propTypes = {\n  schema: PropTypes.object.isRequired,\n  uiSchema: PropTypes.object,\n  errorSchema: PropTypes.object,\n  requiredSchema: PropTypes.object,\n  idSchema: PropTypes.object,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  formData: PropTypes.array,\n  disabled: PropTypes.bool,\n  readonly: PropTypes.bool,\n  registry: PropTypes.shape({\n    widgets: PropTypes.objectOf(PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.object,\n    ])).isRequired,\n    fields: PropTypes.objectOf(PropTypes.func).isRequired,\n    definitions: PropTypes.object.isRequired,\n    formContext: PropTypes.object.isRequired,\n  })\n};\n\nexport default BasicArrayField;\n"]}