{"version":3,"sources":["../../../src/js/components/FormNav.jsx"],"names":["FormNav","newProps","props","formConfig","currentPath","formData","formPages","pageList","expandedPageList","eligiblePageList","chapters","map","p","chapterKey","filter","key","page","path","find","urlPrefix","current","chapterName","indexOf","title","length","React","Component"],"mappings":";;;;;;;;;;;;AAAA;;;;AAEA;;;;AAEA;;;;AAEA;;;;;;;;;;IAOqBA,O;;;;;;;;;;;;AACnB;0CACsBC,Q,EAAU;AAC9B,aAAO,CAAC,4BAAa,KAAKC,KAAlB,EAAyBD,QAAzB,CAAR;AACD;;;6BACQ;AAAA,mBACuC,KAAKC,KAD5C;AAAA,UACCC,UADD,UACCA,UADD;AAAA,UACaC,WADb,UACaA,WADb;AAAA,UAC0BC,QAD1B,UAC0BA,QAD1B;;AAGP;AACA;;AACA,UAAMC,YAAY,iCAAmBH,UAAnB,CAAlB;AACA,UAAMI,WAAW,6BAAeJ,UAAf,EAA2BG,SAA3B,CAAjB;;AAEA;AACA;AACA,UAAME,mBAAmB,+BAAiBD,QAAjB,EAA2BF,QAA3B,CAAzB;AACA,UAAMI,mBAAmB,6BAAeD,gBAAf,EAAiCH,QAAjC,CAAzB;;AAEA,UAAMK,WAAW,oBAAOD,iBACrBE,GADqB,CACjB;AAAA,eAAKC,EAAEC,UAAP;AAAA,OADiB,EAErBC,MAFqB,CAEd;AAAA,eAAO,CAAC,CAACC,GAAT;AAAA,OAFc,CAAP,CAAjB;;AAKA,UAAIC,OAAOP,iBAAiBK,MAAjB,CAAwB;AAAA,eAAKF,EAAEK,IAAF,KAAWb,WAAhB;AAAA,OAAxB,EAAqD,CAArD,CAAX;AACA;AACA;AACA;AACA,UAAI,CAACY,IAAL,EAAW;AACTA,eAAOV,UAAUY,IAAV,CAAe;AAAA,iBAAK,KAAGf,WAAWgB,SAAd,GAA0BP,EAAEK,IAA5B,KAAuCb,WAA5C;AAAA,SAAf,CAAP;AACD;;AAED,UAAIgB,gBAAJ;AACA,UAAIC,oBAAJ;AACA,UAAIL,IAAJ,EAAU;AACRI,kBAAUV,SAASY,OAAT,CAAiBN,KAAKH,UAAtB,IAAoC,CAA9C;AACA;AACAQ,sBAAcL,KAAKH,UAAL,KAAoB,QAApB,GACV,oBADU,GAEVV,WAAWO,QAAX,CAAoBM,KAAKH,UAAzB,EAAqCU,KAFzC;AAGA,YAAI,OAAOF,WAAP,KAAuB,UAA3B,EAAuC;AACrCA,wBAAcA,aAAd;AACD;AACF;;AAED,aACE;AAAA;AAAA;AACE,sCAAC,8BAAD,IAAsB,OAAOX,SAASc,MAAtC,EAA8C,SAASJ,OAAvD,GADF;AAEE;AAAA;AAAA,YAAK,WAAU,6BAAf;AACE;AAAA;AAAA;AACE,oBAAK,aADP;AAEE,+BAAeA,OAFjB;AAGE,+BAAc,GAHhB;AAIE,0CAAwBA,OAAxB,YAAsCV,SAASc,MAA/C,UAA0DH,WAJ5D;AAKE,+BAAeX,SAASc,MAL1B;AAME,yBAAU,kCANZ;AAOE;AAAA;AAAA;AAAI;AAAA;AAAA,kBAAM,WAAU,2BAAhB;AAA6CJ;AAA7C,eAAJ;AAAA;AAAiE;AAAA;AAAA,kBAAM,WAAU,oBAAhB;AAAA;AAAyCV,yBAASc;AAAlD,eAAjE;AAAA;AAAmIH;AAAnI;AAPF;AADF;AAFF,OADF;AAgBD;;;;EA5DkCI,gBAAMC,S;;kBAAtB1B,O","file":"FormNav.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash/fp';\nimport shallowEqual from 'recompose/shallowEqual';\n\nimport SegmentedProgressBar from './SegmentedProgressBar';\n\nimport {\n  createFormPageList,\n  createPageList,\n  expandArrayPages,\n  getActivePages\n} from '../helpers';\n\nexport default class FormNav extends React.Component {\n  // The formConfig transforming is a little heavy, so skip it if we can\n  shouldComponentUpdate(newProps) {\n    return !shallowEqual(this.props, newProps);\n  }\n  render() {\n    const { formConfig, currentPath, formData } = this.props;\n\n    // This is converting the config into a list of pages with chapter keys,\n    // finding the current page, then getting the chapter name using the key\n    const formPages = createFormPageList(formConfig);\n    const pageList = createPageList(formConfig, formPages);\n\n    // These lines are also in src/applications/common/schemaform/routing.js#getEligiblePages\n    // TODO: Pull this logic out to be used in routing.js only\n    const expandedPageList = expandArrayPages(pageList, formData);\n    const eligiblePageList = getActivePages(expandedPageList, formData);\n\n    const chapters = _.uniq(eligiblePageList\n      .map(p => p.chapterKey)\n      .filter(key => !!key)\n    );\n\n    let page = eligiblePageList.filter(p => p.path === currentPath)[0];\n    // If the page isn’t active, it won’t be in the eligiblePageList\n    // This is a fallback to still find the chapter name if you open the page directly\n    // (the chapter index will probably be wrong, but this isn’t a scenario that happens in normal use)\n    if (!page) {\n      page = formPages.find(p => `${formConfig.urlPrefix}${p.path}` === currentPath);\n    }\n\n    let current;\n    let chapterName;\n    if (page) {\n      current = chapters.indexOf(page.chapterKey) + 1;\n      // The review page is always part of our forms, but isn’t listed in chapter list\n      chapterName = page.chapterKey === 'review'\n        ? 'Review Application'\n        : formConfig.chapters[page.chapterKey].title;\n      if (typeof chapterName === 'function') {\n        chapterName = chapterName();\n      }\n    }\n\n    return (\n      <div>\n        <SegmentedProgressBar total={chapters.length} current={current}/>\n        <div className=\"schemaform-chapter-progress\">\n          <div\n            role=\"progressbar\"\n            aria-valuenow={current}\n            aria-valuemin=\"1\"\n            aria-valuetext={`Step ${current} of ${chapters.length}: ${chapterName}`}\n            aria-valuemax={chapters.length}\n            className=\"nav-header nav-header-schemaform\">\n            <h4><span className=\"form-process-step current\">{current}</span> <span className=\"form-process-total\">of {chapters.length}</span> {chapterName}</h4>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]}