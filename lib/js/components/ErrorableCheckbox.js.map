{"version":3,"sources":["../../../src/js/components/ErrorableCheckbox.jsx"],"names":["ErrorableCheckbox","handleChange","bind","inputId","domEvent","props","onValueChange","target","checked","errorSpan","errorSpanId","undefined","errorMessage","requiredSpan","required","className","name","label","React","Component","propTypes","PropTypes","bool","string","oneOfType","object","isRequired","func"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAGMA,iB;;;AACJ,+BAAc;AAAA;;AAAA;;AAEZ,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AAFY;AAGb;;;;yCAEoB;AACnB,WAAKC,OAAL,GAAe,wBAAW,qBAAX,CAAf;AACD;;;iCAEYC,Q,EAAU;AACrB,WAAKC,KAAL,CAAWC,aAAX,CAAyBF,SAASG,MAAT,CAAgBC,OAAzC;AACD;;;6BAEQ;AACP;AACA;AACA,UAAIC,YAAY,EAAhB;AACA,UAAIC,cAAcC,SAAlB;AACA,UAAI,KAAKN,KAAL,CAAWO,YAAf,EAA6B;AAC3BF,sBAAiB,KAAKP,OAAtB;AACAM,oBACE;AAAA;AAAA,YAAM,WAAU,yBAAhB,EAA0C,MAAK,OAA/C,EAAuD,IAAIC,WAA3D;AACE;AAAA;AAAA,cAAM,WAAU,SAAhB;AAAA;AAAA,WADF;AAAA;AAC0C,eAAKL,KAAL,CAAWO;AADrD,SADF;AAKD;;AAED;AACA,UAAIC,eAAeF,SAAnB;AACA,UAAI,KAAKN,KAAL,CAAWS,QAAf,EAAyB;AACvBD,uBAAe;AAAA;AAAA,YAAM,WAAU,oBAAhB;AAAA;AAAA,SAAf;AACD;;AAED,UAAIE,+BACF,KAAKV,KAAL,CAAWO,YAAX,GAA0B,kBAA1B,GAA+C,EAD7C,CAAJ;AAGA,UAAI,CAAC,2BAAc,KAAKP,KAAL,CAAWU,SAAzB,CAAL,EAA0C;AACxCA,oBAAeA,SAAf,SAA4B,KAAKV,KAAL,CAAWU,SAAvC;AACD;;AAED,aACE;AAAA;AAAA,UAAK,WAAWA,SAAhB;AACE;AACE,8BAAkBL,WADpB;AAEE,mBAAS,KAAKL,KAAL,CAAWG,OAFtB;AAGE,cAAI,KAAKL,OAHX;AAIE,gBAAM,KAAKE,KAAL,CAAWW,IAJnB;AAKE,gBAAK,UALP;AAME,oBAAU,KAAKf,YANjB,GADF;AAQE;AAAA;AAAA;AACE,uBACE,KAAKI,KAAL,CAAWO,YAAX,GAA0B,uBAA1B,GAAoDD,SAFxD;AAIE,kBAAS,KAAKN,KAAL,CAAWW,IAApB,WAJF;AAKE,qBAAS,KAAKb,OALhB;AAMG,eAAKE,KAAL,CAAWY,KANd;AAOGJ;AAPH,SARF;AAiBGJ;AAjBH,OADF;AAqBD;;;;EA9D6BS,gBAAMC,S;;AAiEtCnB,kBAAkBoB,SAAlB,GAA8B;AAC5B;;;AAGAZ,WAASa,oBAAUC,IAJS;AAK5B;;;AAGAV,gBAAcS,oBAAUE,MARI;AAS5B;;;AAGAP,QAAMK,oBAAUE,MAZY;AAa5B;;;AAGAN,SAAOI,oBAAUG,SAAV,CAAoB,CAACH,oBAAUE,MAAX,EAAmBF,oBAAUI,MAA7B,CAApB,EAA0DC,UAhBrC;AAiB5B;;;AAGApB,iBAAee,oBAAUM,IAAV,CAAeD,UApBF;AAqB5B;;;AAGAZ,YAAUO,oBAAUC;AAxBQ,CAA9B;;kBA2BetB,iB","file":"ErrorableCheckbox.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport _ from 'lodash';\n\nclass ErrorableCheckbox extends React.Component {\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentWillMount() {\n    this.inputId = _.uniqueId('errorable-checkbox-');\n  }\n\n  handleChange(domEvent) {\n    this.props.onValueChange(domEvent.target.checked);\n  }\n\n  render() {\n    // TODO: extract error logic into a utility function\n    // Calculate error state.\n    let errorSpan = '';\n    let errorSpanId = undefined;\n    if (this.props.errorMessage) {\n      errorSpanId = `${this.inputId}-error-message`;\n      errorSpan = (\n        <span className=\"usa-input-error-message\" role=\"alert\" id={errorSpanId}>\n          <span className=\"sr-only\">Error</span> {this.props.errorMessage}\n        </span>\n      );\n    }\n\n    // Calculate required.\n    let requiredSpan = undefined;\n    if (this.props.required) {\n      requiredSpan = <span className=\"form-required-span\">*</span>;\n    }\n\n    let className = `form-checkbox${\n      this.props.errorMessage ? ' usa-input-error' : ''\n    }`;\n    if (!_.isUndefined(this.props.className)) {\n      className = `${className} ${this.props.className}`;\n    }\n\n    return (\n      <div className={className}>\n        <input\n          aria-describedby={errorSpanId}\n          checked={this.props.checked}\n          id={this.inputId}\n          name={this.props.name}\n          type=\"checkbox\"\n          onChange={this.handleChange}/>\n        <label\n          className={\n            this.props.errorMessage ? 'usa-input-error-label' : undefined\n          }\n          name={`${this.props.name}-label`}\n          htmlFor={this.inputId}>\n          {this.props.label}\n          {requiredSpan}\n        </label>\n        {errorSpan}\n      </div>\n    );\n  }\n}\n\nErrorableCheckbox.propTypes = {\n  /**\n   * If the checkbox is checked or not\n   */\n  checked: PropTypes.bool,\n  /**\n   * Error message for the modal\n   */\n  errorMessage: PropTypes.string,\n  /**\n   * Name for the modal\n   */\n  name: PropTypes.string,\n  /**\n   * Label for the checkbox\n   */\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  /**\n   * Handler for when the checkbox is changed\n   */\n  onValueChange: PropTypes.func.isRequired,\n  /**\n   * If the checkbox is required or not\n   */\n  required: PropTypes.bool\n};\n\nexport default ErrorableCheckbox;\n"]}