{"version":3,"sources":["../../../src/js/components/FieldTemplate.jsx"],"names":["FieldTemplate","props","id","schema","help","required","rawErrors","children","formContext","uiSchema","isTouched","touched","Object","keys","some","startsWith","hasErrors","submitted","length","requiredSpan","label","isDateField","showFieldLabel","hideLabelText","useLabelElement","description","textDescription","DescriptionField","isFieldGroup","errorSpanId","errorSpan","errorClass","containerClassNames","labelClassNames","inputWrapperClassNames","noWrapperContent","type","useFieldsetLegend","labelElement","content"],"mappings":"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","file":"FieldTemplate.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash/fp';\nimport classNames from 'classnames';\n\n/*\n * This is the template for each field (which in the schema library means label + widget)\n */\n\nexport default function FieldTemplate(props) {\n  const {\n    id,\n    schema,\n    help,\n    required,\n    rawErrors,\n    children,\n    formContext,\n    uiSchema\n  } = props;\n\n  const isTouched = formContext.touched[id]\n    || Object.keys(formContext.touched).some(touched => id.startsWith(touched));\n  const hasErrors = (formContext.submitted || isTouched)\n    && rawErrors && rawErrors.length;\n  const requiredSpan = required\n    ? <span className=\"schemaform-required-span\">(*Required)</span>\n    : null;\n  const label = uiSchema['ui:title'] || props.label;\n  const isDateField = uiSchema['ui:widget'] === 'date';\n  const showFieldLabel = uiSchema['ui:options'] && uiSchema['ui:options'].showFieldLabel;\n  const hideLabelText = uiSchema['ui:options'] && uiSchema['ui:options'].hideLabelText;\n  const useLabelElement = showFieldLabel === 'label';\n\n  const description = uiSchema['ui:description'];\n  const textDescription = typeof description === 'string' ? description : null;\n  const DescriptionField = typeof description === 'function'\n    ? uiSchema['ui:description']\n    : null;\n  const isFieldGroup = isDateField || uiSchema['ui:widget'] === 'yesNo' || uiSchema['ui:widget'] === 'radio';\n\n  let errorSpanId;\n  let errorSpan;\n  let errorClass;\n  if (hasErrors) {\n    errorClass = isDateField ? 'input-error-date' : 'usa-input-error';\n    errorSpanId = `${id}-error-message`;\n    errorSpan = (\n      <span className=\"usa-input-error-message\" role=\"alert\" id={errorSpanId}>\n        <span className=\"sr-only\">Error</span> {rawErrors[0]}\n      </span>\n    );\n  }\n\n  const containerClassNames = classNames(\n    'schemaform-field-template',\n    _.get(['ui:options', 'classNames'], uiSchema)\n  );\n  const labelClassNames = classNames({\n    'usa-input-error-label': hasErrors && !isDateField,\n    'schemaform-label': true\n  });\n\n  const inputWrapperClassNames = classNames('schemaform-widget-wrapper', {\n    'usa-input-error form-error-date': isDateField && hasErrors\n  });\n\n  const noWrapperContent = !showFieldLabel &&\n    (\n      schema.type === 'object' ||\n      schema.type === 'array' ||\n      (schema.type === 'boolean' && !uiSchema['ui:widget'])\n    );\n\n  if (noWrapperContent) {\n    return children;\n  }\n\n  const useFieldsetLegend = (isFieldGroup || !!showFieldLabel) && !useLabelElement;\n\n  const labelElement = useFieldsetLegend\n    ? <legend id={`${id}-label`} className={labelClassNames}>{label}{requiredSpan}</legend>\n    : <label id={`${id}-label`} className={labelClassNames} htmlFor={id}>{label}{requiredSpan}</label>;\n\n  const content = (\n    <div className={errorClass}>\n      {!hideLabelText && labelElement}\n      {textDescription && <p>{textDescription}</p>}\n      {DescriptionField && <DescriptionField options={uiSchema['ui:options']}/>}\n      {!textDescription && !DescriptionField && description}\n      {errorSpan}\n      {<div className={inputWrapperClassNames}>{children}</div>}\n      {help}\n    </div>\n  );\n\n  if (useFieldsetLegend) {\n    return (\n      <fieldset className={containerClassNames}>\n        {content}\n      </fieldset>\n    );\n  }\n\n  return (\n    <div className={containerClassNames}>\n      {content}\n    </div>\n  );\n}\n"]}