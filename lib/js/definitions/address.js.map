{"version":3,"sources":["../../../src/js/definitions/address.js"],"names":["schema","uiSchema","validatePostalCodes","errors","address","isValidPostalCode","country","postalCode","addError","stateRequiredCountries","Set","validateAddress","formData","currentSchema","has","state","undefined","required","length","hasAddressInfo","street","city","countryValues","countries","map","object","value","countryNames","label","militaryStates","states","USA","filter","militaryLabels","usaStates","usaLabels","canProvinces","CAN","canLabels","mexStates","MEX","mexLabels","isMilitaryCity","lowerCity","toLowerCase","trim","requiredFields","isRequired","addressProperty","addressSchema","definitions","type","properties","enumNames","title","maxLength","useStreet3","ignoreRequired","fieldOrder","field","addressChangeSelector","path","concat","currentCountry","schemaUpdate","default","stateList","labelList","enum","withEnum","some","withoutEnum","updateSchema","addressUiSchema","index","street2","street3","widgetClassNames"],"mappings":"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","file":"address.js","sourcesContent":["import _ from 'lodash/fp';\nimport { createSelector } from 'reselect';\n\nimport { countries, states, isValidUSZipCode, isValidCanPostalCode } from '../utilities/address';\n\nfunction validatePostalCodes(errors, address) {\n  let isValidPostalCode = true;\n\n  // Checks if postal code is valid\n  if (address.country === 'USA') {\n    isValidPostalCode = isValidPostalCode && isValidUSZipCode(address.postalCode);\n  }\n  if (address.country === 'CAN') {\n    isValidPostalCode = isValidPostalCode && isValidCanPostalCode(address.postalCode);\n  }\n\n  // Add error message for postal code if it is invalid\n  if (address.postalCode && !isValidPostalCode) {\n    errors.postalCode.addError('Please provide a valid postal code');\n  }\n}\n\nexport const stateRequiredCountries = new Set(['USA', 'CAN', 'MEX']);\n\nfunction validateAddress(errors, address, formData, currentSchema) {\n  // Adds error message for state if it is blank and one of the following countries:\n  // USA, Canada, or Mexico\n  if (stateRequiredCountries.has(address.country)\n    && address.state === undefined\n    && currentSchema.required.length) {\n    errors.state.addError('Please select a state or province');\n  }\n\n  const hasAddressInfo = stateRequiredCountries.has(address.country)\n    && !currentSchema.required.length\n    && typeof address.street !== 'undefined'\n    && typeof address.city !== 'undefined'\n    && typeof address.postalCode !== 'undefined';\n\n  if (hasAddressInfo && typeof address.state === 'undefined') {\n    errors.state.addError('Please enter a state or province, or remove other address information.');\n  }\n\n  validatePostalCodes(errors, address);\n}\n\nconst countryValues = countries.map(object => object.value);\nconst countryNames = countries.map(object => object.label);\nconst militaryStates = states.USA\n  .filter(state => state.value === 'AE' || state.value === 'AP' || state.value === 'AA')\n  .map(state => state.value);\nconst militaryLabels = states.USA\n  .filter(state => state.value === 'AE' || state.value === 'AP' || state.value === 'AA')\n  .map(state => state.label);\nconst usaStates = states.USA.map(state => state.value);\nconst usaLabels = states.USA.map(state => state.label);\nconst canProvinces = states.CAN.map(state => state.value);\nconst canLabels = states.CAN.map(state => state.label);\nconst mexStates = states.MEX.map(state => state.value);\nconst mexLabels = states.MEX.map(state => state.label);\n\nfunction isMilitaryCity(city = '') {\n  const lowerCity = city.toLowerCase().trim();\n\n  return lowerCity === 'apo' || lowerCity === 'fpo' || lowerCity === 'dpo';\n}\n\nconst requiredFields = ['street', 'city', 'country', 'state', 'postalCode'];\n\n/*\n * Create schema for addresses\n *\n * @param {object} schema - Schema for a full form, including address definition in definitions\n * @param {boolean} isRequired - If the address is required or not, defaults to false\n * @param {string} addressProperty - The name of the address definition to use from the common\n *   definitions in currentSchema\n */\nexport function schema(currentSchema, isRequired = false, addressProperty = 'address') {\n  const addressSchema = currentSchema.definitions[addressProperty];\n  return {\n    type: 'object',\n    required: isRequired ? requiredFields : [],\n    properties: _.assign(addressSchema.properties, {\n      country: {\n        'default': 'USA',\n        type: 'string',\n        'enum': countryValues,\n        enumNames: countryNames\n      },\n      state: {\n        title: 'State',\n        type: 'string',\n        maxLength: 51\n      },\n      postalCode: {\n        type: 'string',\n        maxLength: 10\n      }\n    })\n  };\n}\n\n/*\n * Create uiSchema for addresses\n *\n * @param {string} label - Block label for the address\n * @param {boolean} useStreet3 - Show a third line in the address\n * @param {function} isRequired - A function for conditionally setting if an address is required.\n *   Receives formData and an index (if in an array item)\n * @param {boolean} ignoreRequired - Ignore the required fields array, to avoid overwriting form specific\n *   customizations\n */\nexport function uiSchema(label = 'Address', useStreet3 = false, isRequired = null, ignoreRequired = false) {\n  let fieldOrder = ['country', 'street', 'street2', 'street3', 'city', 'state', 'postalCode'];\n  if (!useStreet3) {\n    fieldOrder = fieldOrder.filter(field => field !== 'street3');\n  }\n\n  const addressChangeSelector = createSelector(\n    ({ formData, path }) => _.get(path.concat('country'), formData),\n    ({ formData, path }) => _.get(path.concat('city'), formData),\n    _.get('addressSchema'),\n    (currentCountry, city, addressSchema) => {\n      const schemaUpdate = {\n        properties: addressSchema.properties,\n        required: addressSchema.required\n      };\n      const country = currentCountry || addressSchema.properties.country.default;\n      const required = addressSchema.required.length > 0;\n\n      let stateList;\n      let labelList;\n      if (country === 'USA') {\n        stateList = usaStates;\n        labelList = usaLabels;\n      } else if (country === 'CAN') {\n        stateList = canProvinces;\n        labelList = canLabels;\n      } else if (country === 'MEX') {\n        stateList = mexStates;\n        labelList = mexLabels;\n      }\n\n      if (stateList) {\n        // We have a list and it’s different, so we need to make schema updates\n        if (addressSchema.properties.state.enum !== stateList) {\n          const withEnum = _.set('state.enum', stateList, schemaUpdate.properties);\n          schemaUpdate.properties = _.set('state.enumNames', labelList, withEnum);\n\n          // all the countries with state lists require the state field, so add that if necessary\n          if (!ignoreRequired && required && !addressSchema.required.some(field => field === 'state')) {\n            schemaUpdate.required = addressSchema.required.concat('state');\n          }\n        }\n      // We don’t have a state list for the current country, but there’s an enum in the schema\n      // so we need to update it\n      } else if (addressSchema.properties.state.enum) {\n        const withoutEnum = _.unset('state.enum', schemaUpdate.properties);\n        schemaUpdate.properties = _.unset('state.enumNames', withoutEnum);\n        if (!ignoreRequired && required) {\n          schemaUpdate.required = addressSchema.required.filter(field => field !== 'state');\n        }\n      }\n\n      // Canada has a different title than others, so set that when necessary\n      if (country === 'CAN' && addressSchema.properties.state.title !== 'Province') {\n        schemaUpdate.properties = _.set('state.title', 'Province', schemaUpdate.properties);\n      } else if (country !== 'CAN' && addressSchema.properties.state.title !== 'State') {\n        schemaUpdate.properties = _.set('state.title', 'State', schemaUpdate.properties);\n      }\n\n      // We constrain the state list when someone picks a city that’s a military base\n      if (country === 'USA' && isMilitaryCity(city) && schemaUpdate.properties.state.enum !== militaryStates) {\n        const withEnum = _.set('state.enum', militaryStates, schemaUpdate.properties);\n        schemaUpdate.properties = _.set('state.enumNames', militaryLabels, withEnum);\n      }\n\n      return schemaUpdate;\n    }\n  );\n\n  return {\n    'ui:title': label,\n    'ui:validations': [\n      validateAddress\n    ],\n    'ui:options': {\n      updateSchema: (formData, addressSchema, addressUiSchema, index, path) => {\n        let currentSchema = addressSchema;\n        if (isRequired) {\n          const required = isRequired(formData, index);\n          if (required && currentSchema.required.length === 0) {\n            currentSchema = _.set('required', requiredFields, currentSchema);\n          } else if (!required && currentSchema.required.length > 0) {\n            currentSchema = _.set('required', [], currentSchema);\n          }\n        }\n        return addressChangeSelector({\n          formData,\n          addressSchema: currentSchema,\n          path\n        });\n      }\n    },\n    'ui:order': fieldOrder,\n    country: {\n      'ui:title': 'Country'\n    },\n    street: {\n      'ui:title': 'Street'\n    },\n    street2: {\n      'ui:title': 'Line 2'\n    },\n    street3: {\n      'ui:title': 'Line 3'\n    },\n    city: {\n      'ui:title': 'City'\n    },\n    state: {},\n    postalCode: {\n      'ui:title': 'Postal code',\n      'ui:options': {\n        widgetClassNames: 'usa-input-medium'\n      }\n    }\n  };\n}\n"]}