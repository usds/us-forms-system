{"version":3,"sources":["../../src/js/validation.js"],"names":["transformErrors","uiSchemaValidate","errorSchemaIsValid","isValidForm","validateSSN","validateDate","validateMonthYear","validateCurrentOrPastDate","validateCurrentOrPastMonthYear","validateFutureDateIfExpectedGrad","validateCurrentOrPastYear","validateMatch","convertToDateField","validateDateRange","getFileError","validateFileField","validateBooleanGroup","validateAutosuggestOption","validateCurrency","defaultMessages","required","maxLength","max","minLength","min","format","type","getMessage","path","name","uiSchema","errorArgument","pathSpecificMessage","cleanPath","replace","errors","newErrors","map","error","property","argument","message","newMessage","schema","formData","currentIndex","currentData","items","forEach","item","index","newPath","currentSchema","length","additionalItems","currentErrors","__errors","addError","push","Object","keys","filter","prop","startsWith","nextPath","properties","validations","pathErrors","validation","validator","options","errorSchema","every","form","pageListByChapters","pageConfigs","validPages","pages","pageKey","data","v","Validator","reduce","page","isValid","showPagePerItem","itemFilter","arrayPath","arrayData","result","validate","valid","customErrors","concat","ssn","dateString","day","month","year","errorMessages","futureDate","highSchool","status","field1","field2","dateStr","date","dateField","part","datePart","value","dateRange","fromDate","from","toDate","to","pattern","file","errorMessage","uploading","confirmationCode","fileList","msg","userGroup","atLeastOne","group","widget","id","label","currencyAmount","test"],"mappings":"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","file":"validation.js","sourcesContent":["import _ from 'lodash/fp';\nimport { Validator } from 'jsonschema';\n\nimport { isActivePage, parseISODate } from './helpers';\nimport {\n  isValidSSN,\n  isValidPartialDate,\n  isValidCurrentOrPastDate,\n  isValidCurrentOrPastYear,\n  isValidCurrentOrFutureMonthYear,\n  isValidDateRange,\n  isValidPartialMonthYear,\n  isValidPartialMonthYearInPast\n} from './utilities/validations';\n\n/*\n * This contains the code for supporting our own custom validations and messages\n */\n\n/*\n * Override the default messages for these json schema error types\n */\nconst defaultMessages = {\n  required: 'Please provide a response',\n  'enum': 'Please select a valid option',\n  maxLength: (max) => `This field should be less than ${max} characters`,\n  minLength: (min) => `This field should be at least ${min} character(s)`,\n  format: (type) => {\n    if (type === 'email') {\n      return 'Please enter a valid email address';\n    }\n\n    return 'Please enter a valid value';\n  }\n};\n\nfunction getMessage(path, name, uiSchema, errorArgument) {\n  let pathSpecificMessage;\n  if (path === 'instance') {\n    pathSpecificMessage = _.get(['ui:errorMessages', name], uiSchema);\n  } else {\n    const cleanPath = path.replace('instance.', '').replace(/\\[\\d+\\]/g, '.items');\n    pathSpecificMessage = _.get(`${cleanPath}['ui:errorMessages'].${name}`, uiSchema);\n  }\n\n  if (pathSpecificMessage) {\n    return pathSpecificMessage;\n  }\n\n  return typeof defaultMessages[name] === 'function'\n    ? defaultMessages[name](errorArgument)\n    : defaultMessages[name];\n}\n\n/*\n * This takes the list of errors outputted by the json schema node library\n * and moves the required errors to the missing field, rather than the containing\n * object.\n *\n * It also replaces the error messages with any form specific messages.\n */\nexport function transformErrors(errors, uiSchema) {\n  const newErrors = errors.map(error => {\n    if (error.name === 'required') {\n      const path = `${error.property}.${error.argument}`;\n      return _.assign(error, {\n        property: path,\n        message: getMessage(path, error.name, uiSchema, error.argument)\n      });\n    }\n\n    const newMessage = getMessage(error.property, error.name, uiSchema, error.argument);\n    if (newMessage) {\n      return _.set('message', newMessage, error);\n    }\n\n    return error;\n  });\n\n  return newErrors;\n}\n\n/**\n * This pulls custom validations specified in the uiSchema and validates the formData\n * against them.\n *\n * Expects validations that look like:\n *\n * someField: {\n *   \"ui:validations\": [\n *     someValidation\n *   ]\n * }\n *\n * Each item in the ui:validations array can be a function OR an object:\n *    - Functions are called with (in order)\n *        pathErrors:                   Errors object for the field\n *        currentData:                  Data for the field\n *        formData:                     Current form data\n *        schema:                       Current JSON Schema for the field\n *        uiSchema['ui:errorMessages']: Error messsage object (if available) for the field\n *        currentIndex:                 Used to select the correct field data to validate against\n *    - Objects should have two properties, 'options' and 'validator'\n *        options:   Object (or anything, really) that will be passed to your validation function.\n *                   You can use this to allow your validation function to be configurable for\n *                   different fields on the form.\n *        validator: Same signature as function above, but with extra 'options' object as the\n *                   second-to-last argument (...options, currentIndex)\n * Both versions of custom validators should call `addError()` to actually add any errors to the\n * errors object\n *\n * @param {Object} errors Errors object from rjsf, which includes an addError method\n * @param {Object} uiSchema The uiSchema for the current field\n * @param {Object} schema The schema for the current field\n * @param {Object} formData The (flattened) data for the entire form\n * @param {string} [path] The path to the current field relative to the root of the page.\n * @param {number} [currentIndex] Used to select the correct field data to validate against\n */\n\nexport function uiSchemaValidate(errors, uiSchema, schema, formData, path = '', currentIndex = null) {\n  if (uiSchema && schema) {\n    const currentData = path !== '' ? _.get(path, formData) : formData;\n    if (uiSchema.items && currentData) {\n      currentData.forEach((item, index) => {\n        const newPath = `${path}[${index}]`;\n        const currentSchema = index < schema.items.length\n          ? schema.items[index]\n          : schema.additionalItems;\n        if (!_.get(newPath, errors)) {\n          const currentErrors = path ? _.get(path, errors) : errors;\n          currentErrors[index] = {\n            __errors: [],\n            addError(error) {\n              this.__errors.push(error);\n            }\n          };\n        }\n        uiSchemaValidate(errors, uiSchema.items, currentSchema, formData, newPath, index);\n      });\n    } else if (!uiSchema.items) {\n      Object.keys(uiSchema)\n        .filter(prop => !prop.startsWith('ui:'))\n        .forEach((item) => {\n          const nextPath = path !== '' ? `${path}.${item}` : item;\n          if (!_.get(nextPath, errors)) {\n            const currentErrors = path === ''\n              ? errors\n              : _.get(path, errors);\n\n            currentErrors[item] = {\n              __errors: [],\n              addError(error) {\n                this.__errors.push(error);\n              }\n            };\n          }\n          uiSchemaValidate(errors, uiSchema[item], schema.properties[item], formData, nextPath, currentIndex);\n        });\n    }\n\n    const validations = uiSchema['ui:validations'];\n    if (validations && currentData) {\n      validations.forEach(validation => {\n        const pathErrors = path ? _.get(path, errors) : errors;\n        if (typeof validation === 'function') {\n          validation(pathErrors, currentData, formData, schema, uiSchema['ui:errorMessages'], currentIndex);\n        } else {\n          validation.validator(pathErrors, currentData, formData, schema, uiSchema['ui:errorMessages'], validation.options, currentIndex);\n        }\n      });\n    }\n  }\n  return errors;\n}\n\nexport function errorSchemaIsValid(errorSchema) {\n  if (errorSchema && errorSchema.__errors && errorSchema.__errors.length) {\n    return false;\n  }\n\n  return _.values(_.omit('__errors', errorSchema)).every(errorSchemaIsValid);\n}\n\nexport function isValidForm(form, pageListByChapters) {\n  const pageConfigs = _.flatten(_.values(pageListByChapters));\n  const validPages = Object.keys(form.pages)\n    .filter(pageKey => isActivePage(_.find({ pageKey }, pageConfigs), form.data));\n\n  const v = new Validator();\n\n  return validPages.reduce(({ isValid, errors }, page) => {\n    const { uiSchema, schema, showPagePerItem, itemFilter, arrayPath } = form.pages[page];\n    let formData = form.data;\n\n    if (showPagePerItem) {\n      const arrayData = formData[arrayPath];\n      if (arrayData) {\n        formData = _.set(arrayPath, itemFilter ? arrayData.filter(itemFilter) : arrayData, formData);\n      } else {\n        formData = _.unset(arrayPath, formData);\n      }\n    }\n\n    const result = v.validate(\n      formData,\n      schema\n    );\n\n    if (result.valid) {\n      const customErrors = {};\n      uiSchemaValidate(customErrors, uiSchema, schema, formData);\n\n      return {\n        isValid: isValid && errorSchemaIsValid(customErrors),\n        errors: errors.concat(customErrors)\n      };\n    }\n\n    return {\n      isValid: false,\n      // removes PII\n      errors: errors.concat(result.errors.map(_.unset('instance')))\n    };\n  }, { isValid: true, errors: [] });\n}\n\n\nexport function validateSSN(errors, ssn) {\n  if (ssn && !isValidSSN(ssn)) {\n    errors.addError('Please enter a valid 9 digit SSN (dashes allowed)');\n  }\n}\n\nexport function validateDate(errors, dateString) {\n  const { day, month, year } = parseISODate(dateString);\n  if (!isValidPartialDate(day, month, year)) {\n    errors.addError('Please provide a valid date');\n  }\n}\n\nexport function validateMonthYear(errors, dateString) {\n  const { month, year } = parseISODate(dateString);\n  if (!isValidPartialMonthYear(month, year)) {\n    errors.addError('Please provide a valid date');\n  }\n}\n\n/**\n * Adds an error message to errors if a date is an invalid date or in the future.\n *\n * The message it adds can be customized in uiSchema.errorMessages.futureDate\n */\nexport function validateCurrentOrPastDate(errors, dateString, formData, schema, errorMessages = {}) {\n  const { futureDate = 'Please provide a valid current or past date' } = errorMessages;\n  validateDate(errors, dateString);\n  const { day, month, year } = parseISODate(dateString);\n  if (!isValidCurrentOrPastDate(day, month, year)) {\n    errors.addError(futureDate);\n  }\n}\n\nexport function validateCurrentOrPastMonthYear(errors, dateString, formData, schema, errorMessages = {}) {\n  const { futureDate = 'Please provide a valid current or past date' } = errorMessages;\n  validateMonthYear(errors, dateString);\n  const { month, year } = parseISODate(dateString);\n  if (!isValidPartialMonthYearInPast(month, year)) {\n    errors.addError(futureDate);\n  }\n}\n\n/**\n * Adds an error message to errors if a date is an invalid date or in the past.\n */\nexport function validateFutureDateIfExpectedGrad(errors, dateString, formData) {\n  validateDate(errors, dateString);\n  const { month, year } = parseISODate(dateString);\n  if (formData.highSchool.status === 'graduationExpected' && !isValidCurrentOrFutureMonthYear(month, year)) {\n    errors.addError('Please provide a valid future date');\n  }\n}\n\n/**\n * Adds an error message to errors if an integer year value is not between 1900 and the current year.\n */\nexport function validateCurrentOrPastYear(errors, year) {\n  if (!isValidCurrentOrPastYear(year)) {\n    errors.addError('Please provide a valid year');\n  }\n}\n\nexport function validateMatch(field1, field2) {\n  return (errors, formData) => {\n    if (formData[field1] !== formData[field2]) {\n      errors[field2].addError('Please ensure your entries match');\n    }\n  };\n}\n\nexport function convertToDateField(dateStr) {\n  const date = parseISODate(dateStr);\n  return Object.keys(date).reduce((dateField, part) => {\n    const datePart = {};\n    datePart[part] = {\n      value: date[part]\n    };\n    return _.assign(dateField, datePart);\n  }, date);\n}\n\nexport function validateDateRange(errors, dateRange, formData, schema, errorMessages) {\n  const fromDate = convertToDateField(dateRange.from);\n  const toDate = convertToDateField(dateRange.to);\n\n  if (!isValidDateRange(fromDate, toDate)) {\n    errors.to.addError(errorMessages.pattern || 'To date must be on or after from date');\n  }\n}\n\nexport function getFileError(file) {\n  if (file.errorMessage) {\n    return file.errorMessage;\n  } else if (file.uploading) {\n    return 'Uploading file...';\n  } else if (!file.confirmationCode) {\n    return 'Something went wrong...';\n  }\n\n  return null;\n}\n\nexport function validateFileField(errors, fileList) {\n  fileList.forEach((file, index) => {\n    const error = getFileError(file);\n\n    if (error && !errors[index]) {\n      /* eslint-disable no-param-reassign */\n      errors[index] = {\n        __errors: [],\n        addError(msg) {\n          this.__errors.push(msg);\n        }\n      };\n      /* eslint-enable no-param-reassign */\n    }\n\n    if (error) {\n      errors[index].addError(error);\n    }\n  });\n}\n\nexport function validateBooleanGroup(errors, userGroup, form, schema, errorMessages = {}) {\n  const { atLeastOne = 'Please choose at least one option' } = errorMessages;\n  const group = userGroup || {};\n  if (!Object.keys(group).filter(item => group[item] === true).length) {\n    errors.addError(atLeastOne);\n  }\n}\n\nexport function validateAutosuggestOption(errors, formData) {\n  if (formData &&\n    formData.widget === 'autosuggest' &&\n    !formData.id &&\n    formData.label) {\n    errors.addError('Please select an option from the suggestions');\n  }\n}\n\nexport function validateCurrency(errors, currencyAmount) {\n  // Source: https://stackoverflow.com/a/16242575\n  if (!/(?=.*?\\d)^\\$?(([1-9]\\d{0,2}(,\\d{3})*)|\\d+)?(\\.\\d{1,2})?$/.test(currencyAmount)) {\n    errors.addError('Please enter a valid dollar amount');\n  }\n}\n"]}