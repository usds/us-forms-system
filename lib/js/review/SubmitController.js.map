{"version":3,"sources":["../../../src/js/review/SubmitController.jsx"],"names":["SubmitController","getPreSubmit","required","field","label","error","formConfig","preSubmitInfo","goBack","props","form","pageList","router","eligiblePageList","data","expandedPageList","push","length","path","handleSubmit","pagesByChapter","preSubmit","setSubmission","isValid","errors","recordEvent","console","log","bind","event","submitForm","nextProps","nextStatus","submission","status","previousStatus","newRoute","urlPrefix","showPreSubmitError","renderErrorMessage","setPreSubmit","target","value","React","Component","mapStateToProps","state","ownProps","hasAttemptedSubmit","mapDispatchToProps","propTypes","PropTypes","object","isRequired","array","func"],"mappings":"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","file":"SubmitController.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport SubmitButtons from './SubmitButtons';\nimport { PreSubmitSection } from '../components/PreSubmitSection';\nimport { isValidForm } from '../validation';\nimport {\n  createPageListByChapter,\n  expandArrayPages,\n  getActivePages\n} from '../helpers';\nimport {\n  setPreSubmit,\n  setSubmission,\n  submitForm\n} from '../actions';\n\nclass SubmitController extends React.Component {\n\n  componentWillReceiveProps(nextProps) {\n    const nextStatus = nextProps.form.submission.status;\n    const previousStatus = this.props.form.submission.status;\n    if (nextStatus !== previousStatus && nextStatus === 'applicationSubmitted') {\n      const newRoute = `${nextProps.formConfig.urlPrefix}confirmation`;\n      this.props.router.push(newRoute);\n    }\n  }\n\n  getPreSubmit = formConfig => {\n    return {\n      required: false,\n      field: 'AGREED',\n      label: 'I agree to the terms and conditions.',\n      error: 'You must accept the agreement before submitting.',\n      ...formConfig.preSubmitInfo\n    };\n  }\n\n  goBack = () => {\n    const {\n      form,\n      pageList,\n      router\n    } = this.props;\n\n    const eligiblePageList = getActivePages(pageList, form.data);\n    const expandedPageList = expandArrayPages(eligiblePageList, this.props.form.data);\n\n    // TODO: Fix this bug that assumes there is a confirmation page.\n    // Actually, it assumes the app also doesn't add routes at the end!\n    // A component at this level should not need to know these things!\n    router.push(expandedPageList[expandedPageList.length - 2].path);\n  }\n\n  handleSubmit = () => {\n    const {\n      form,\n      formConfig,\n      pagesByChapter\n    } = this.props;\n\n    // If a pre-submit agreement is required, make sure it was accepted\n    const preSubmit = this.getPreSubmit(formConfig);\n    if (preSubmit.required && !form.data[preSubmit.field]) {\n      this.props.setSubmission('hasAttemptedSubmit', true);\n      // <PreSubmitSection/> is displaying an error for this case\n      return;\n    }\n\n    // Validation errors in this situation are not visible, so we’d\n    // like to know if they’re common\n    const { isValid, errors } = isValidForm(form, pagesByChapter);\n    if (!isValid) {\n      const recordEvent = formConfig.recordEvent ?\n        formConfig.recordEvent :\n        console.log.bind(console);   // eslint-disable-line no-console\n\n      recordEvent({ event: 'validation-failed-on-submit', errors });\n      this.props.setSubmission('status', 'validationError');\n      this.props.setSubmission('hasAttemptedSubmit', true);\n      return;\n    }\n\n    // User accepted if required, and no errors, so submit\n    this.props.submitForm(formConfig, form);\n  }\n\n  render() {\n    const {\n      form,\n      formConfig,\n      showPreSubmitError,\n      renderErrorMessage\n    } = this.props;\n    const preSubmit = this.getPreSubmit(formConfig);\n\n    return (\n      <div>\n        <PreSubmitSection\n          preSubmitInfo={preSubmit}\n          onChange={(event) => this.props.setPreSubmit(preSubmit.field, event.target.value)}\n          checked={form.data[preSubmit.field]}\n          showError={showPreSubmitError}/>\n        <SubmitButtons\n          onBack={this.goBack}\n          onSubmit={this.handleSubmit}\n          submission={form.submission}\n          renderErrorMessage={renderErrorMessage}/>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const {\n    formConfig,\n    pageList,\n    renderErrorMessage\n  } = ownProps;\n  const router = ownProps.router;\n\n  const form = state.form;\n  const pagesByChapter = createPageListByChapter(formConfig);\n  const submission = form.submission;\n  const showPreSubmitError = submission.hasAttemptedSubmit;\n\n  return {\n    form,\n    formConfig,\n    pagesByChapter,\n    pageList,\n    renderErrorMessage,\n    router,\n    submission,\n    showPreSubmitError\n  };\n}\n\nconst mapDispatchToProps = {\n  setPreSubmit,\n  setSubmission,\n  submitForm\n};\n\nSubmitController.propTypes = {\n  form: PropTypes.object.isRequired,\n  formConfig: PropTypes.object.isRequired,\n  pagesByChapter: PropTypes.object.isRequired,\n  pageList: PropTypes.array.isRequired,\n  renderErrorMessage: PropTypes.func,\n  router: PropTypes.object.isRequired,\n  setPreSubmit: PropTypes.func.isRequired,\n  setSubmission: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  submission: PropTypes.object.isRequired\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SubmitController));\n\n// for tests\nexport { SubmitController };\n"]}