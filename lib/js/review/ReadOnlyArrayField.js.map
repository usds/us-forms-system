{"version":3,"sources":["../../../src/js/review/ReadOnlyArrayField.jsx"],"names":["ReadOnlyArrayField","shouldComponentUpdate","nextProps","props","getItemSchema","index","schema","items","uiSchema","errorSchema","idSchema","formData","disabled","readonly","registry","definitions","SchemaField","fields","uiOptions","map","item","itemSchema","itemIdPrefix","$id","itemIdSchema","itemName","undefined","f","React","Component","propTypes","PropTypes","object","isRequired","array","bool","shape","widgets","objectOf","oneOfType","func","formContext"],"mappings":"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","file":"ReadOnlyArrayField.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  toIdSchema,\n  deepEquals\n} from '@department-of-veterans-affairs/react-jsonschema-form/lib/utils';\n\nclass ReadOnlyArrayField extends React.Component {\n  shouldComponentUpdate = (nextProps) => {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  getItemSchema = (index) => {\n    return this.props.schema.items[index];\n  }\n\n  render() {\n    const {\n      uiSchema,\n      errorSchema,\n      idSchema,\n      formData,\n      disabled,\n      readonly,\n      registry\n    } = this.props;\n    const definitions = registry.definitions;\n    const { SchemaField } = registry.fields;\n    const uiOptions = uiSchema['ui:options'] || {};\n\n    const items = formData || [];\n\n    return (\n      <div className=\"schemaform-field-container\">\n        <div>\n          {items.map((item, index) => {\n            const itemSchema = this.getItemSchema(index);\n            const itemIdPrefix = `${idSchema.$id}_${index}`;\n            const itemIdSchema = toIdSchema(itemSchema, itemIdPrefix, definitions);\n\n            return (\n              <div key={index} className=\"va-growable-background\">\n                <div className=\"row small-collapse\">\n                  <div className=\"small-12 columns\">\n                    <h5 className=\"schemaform-array-readonly-header\">{uiOptions.itemName}</h5>\n                    <SchemaField key={index}\n                      schema={itemSchema}\n                      uiSchema={uiSchema.items}\n                      errorSchema={errorSchema ? errorSchema[index] : undefined}\n                      idSchema={itemIdSchema}\n                      formData={item}\n                      onChange={f => f}\n                      onBlur={f => f}\n                      registry={this.props.registry}\n                      required={false}\n                      disabled={disabled}\n                      readonly={readonly}/>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nReadOnlyArrayField.propTypes = {\n  schema: PropTypes.object.isRequired,\n  uiSchema: PropTypes.object,\n  errorSchema: PropTypes.object,\n  idSchema: PropTypes.object,\n  formData: PropTypes.array,\n  disabled: PropTypes.bool,\n  readonly: PropTypes.bool,\n  registry: PropTypes.shape({\n    widgets: PropTypes.objectOf(PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.object,\n    ])).isRequired,\n    fields: PropTypes.objectOf(PropTypes.func).isRequired,\n    definitions: PropTypes.object.isRequired,\n    formContext: PropTypes.object.isRequired,\n  })\n};\n\nexport default ReadOnlyArrayField;\n"]}