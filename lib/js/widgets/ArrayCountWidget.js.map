{"version":3,"sources":["../../../src/js/widgets/ArrayCountWidget.jsx"],"names":["ArrayCountWidget","props","getValue","count","value","undefined","intCount","options","countOffset","length","slice","Array","fill","concat","updateArrayLength","event","setState","userCount","target","state","prevProps","prevState","parseInt","isNaN","onChange","formContext","reviewMode","uiSchema","autocomplete","id","disabled","widgetClassNames","onBlur","React","Component","propTypes","PropTypes","shape","string","defaultProps"],"mappings":"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","file":"ArrayCountWidget.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport default class ArrayCountWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { userCount: props.value\n      ? props.value.length - (this.props.options.countOffset || 0)\n      : undefined };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.userCount !== this.state.userCount) {\n      let count = parseInt(this.state.userCount, 10);\n      if (isNaN(count)) {\n        count = 0;\n      }\n\n      // Too high of a count can crash the browser. We’ve been using\n      // this for marriage counts and 29 is the record, so 29 seems like\n      // a good upper limit. Filling out more than 29 pages is probably\n      // not reasonable in a form anyway\n      if (count > 29) {\n        count = 29;\n      }\n\n      this.props.onChange(this.getValue(count, this.props.value));\n    }\n  }\n  // We’re expanding or contracting the array based on the count\n  // and returning undefined if the array should be empty\n  getValue = (count, value = []) => {\n    if (count === 0) {\n      return undefined;\n    }\n\n    const intCount = count + (this.props.options.countOffset || 0);\n\n    if (intCount < 0) {\n      return undefined;\n    }\n\n    if (intCount < value.length) {\n      return value.slice(0, intCount);\n    }\n\n    return Array(intCount - value.length).fill({}).concat(value);\n  }\n\n  updateArrayLength = (event) => {\n    this.setState({ userCount: event.target.value });\n  }\n\n  render() {\n    const props = this.props;\n\n    if (props.formContext.reviewMode) {\n      return (\n        <div className=\"review-row\">\n          <dt>{props.uiSchema['ui:title']}</dt><dd>{this.state.userCount}</dd>\n        </div>\n      );\n    }\n\n    return (\n      <input\n        autoComplete={props.options.autocomplete}\n        type=\"number\"\n        step=\"1\"\n        min=\"1\"\n        id={props.id}\n        name={props.id}\n        disabled={props.disabled}\n        className={classnames(props.options.widgetClassNames)}\n        value={typeof this.state.userCount === 'undefined' ? '' : this.state.userCount}\n        onBlur={() => props.onBlur(props.id)}\n        onChange={this.updateArrayLength}/>\n    );\n  }\n}\n\nArrayCountWidget.propTypes = {\n  /**\n   * ui:options from uiSchema\n   */\n  options: PropTypes.shape({\n    /*\n    * input's autocomplete attribute value\n    */\n    autocomplete: PropTypes.string\n  }),\n};\n\nArrayCountWidget.defaultProps = {\n  options: {}\n};\n"]}