{"version":3,"sources":["../../../src/js/widgets/DateWidget.jsx"],"names":["getEmptyState","value","touched","month","day","year","DateWidget","props","isTouched","isIncomplete","handleChange","bind","handleBlur","state","newProps","formContext","pagePerItemIndex","setState","field","newState","onBlur","id","required","onChange","options","daysForSelectedMonth","monthYear","days","event","target","months","map","mnth","label","dayOpt","autocomplete","React","Component","propTypes","PropTypes","string","isRequired","func","shape","defaultProps"],"mappings":"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","file":"DateWidget.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport _ from 'lodash/fp';\n\nimport { months, days } from '../utilities/date';\nimport { formatISOPartialDate, parseISODate } from '../helpers';\n\nfunction getEmptyState(value) {\n  return {\n    value: parseISODate(value),\n    touched: {\n      month: false,\n      day: false,\n      year: false\n    }\n  };\n}\n\nexport default class DateWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.state = getEmptyState(this.props.value);\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.formContext.pagePerItemIndex !== this.props.formContext.pagePerItemIndex) {\n      this.setState(getEmptyState(newProps.value));\n    }\n  }\n\n  isTouched = ({ year, month, day }) => {\n    if (_.get('options.monthYear', this.props)) {\n      return year && month;\n    }\n\n    return year && day && month;\n  }\n\n  isIncomplete = ({ month, year, day }) => {\n    if (_.get('options.monthYear', this.props)) {\n      return !year || !month;\n    }\n\n    return !year || !month || !day;\n  }\n\n  handleBlur(field) {\n    const newState = _.set(['touched', field], true, this.state);\n    this.setState(newState, () => {\n      if (this.isTouched(newState.touched)) {\n        this.props.onBlur(this.props.id);\n      }\n    });\n  }\n\n  handleChange(field, value) {\n    let newState = _.set(['value', field], value, this.state);\n    newState = _.set(['touched', field], true, newState);\n\n    this.setState(newState, () => {\n      if (this.props.required && (this.isIncomplete(newState.value))) {\n        this.props.onChange();\n      } else {\n        this.props.onChange(formatISOPartialDate(newState.value));\n      }\n    });\n  }\n\n  render() {\n    const { id, options = {} } = this.props;\n    const { month, day, year } = this.state.value;\n    let daysForSelectedMonth;\n\n    const monthYear = options.monthYear;\n    if (month) {\n      daysForSelectedMonth = days[month];\n    }\n    return (\n      <div className=\"usa-date-of-birth row\">\n        <div className=\"form-datefield-month\">\n          <label className=\"input-date-label\" htmlFor={`${id}Month`}>Month</label>\n          <select\n            name={`${id}Month`}\n            id={`${id}Month`}\n            value={month}\n            onChange={(event) => this.handleChange('month', event.target.value)}>\n            <option value=\"\"/>\n            {months.map(mnth => <option key={mnth.value} value={mnth.value}>{mnth.label}</option>)}\n          </select>\n        </div>\n        {!monthYear && <div className=\"form-datefield-day\">\n          <label className=\"input-date-label\" htmlFor={`${id}Day`}>Day</label>\n          <select\n            name={`${id}Day`}\n            id={`${id}Day`}\n            value={day}\n            onChange={(event) => this.handleChange('day', event.target.value)}>\n            <option value=\"\"/>\n            {daysForSelectedMonth && daysForSelectedMonth.map(dayOpt => <option key={dayOpt} value={dayOpt}>{dayOpt}</option>)}\n          </select>\n        </div>}\n        <div className=\"usa-datefield usa-form-group usa-form-group-year\">\n          <label className=\"input-date-label\" htmlFor={`${id}Year`}>Year</label>\n          <input type=\"number\"\n            autoComplete={options.autocomplete}\n            name={`${id}Year`}\n            id={`${id}Year`}\n            max=\"3000\"\n            min=\"1900\"\n            pattern=\"[0-9]{4}\"\n            value={year}\n            onBlur={() => this.handleBlur('year')}\n            onChange={(event) => this.handleChange('year', event.target.value)}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nDateWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  /**\n   * ui:options from uiSchema\n  */\n  options: PropTypes.shape({\n    /*\n    * input's autocomplete attribute value\n    */\n    autocomplete: PropTypes.string\n  }),\n  value: PropTypes.string\n};\n\nDateWidget.defaultProps = {\n  options: {}\n};\n"]}