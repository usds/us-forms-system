{"version":3,"sources":["../../../src/js/widgets/TextWidget.jsx"],"names":["TextWidget","numberTypes","Set","props","inputType","options","has","schema","type","autocomplete","id","disabled","maxLength","widgetClassNames","value","onBlur","event","onChange","target","undefined","propTypes","PropTypes","shape","string","defaultProps"],"mappings":";;;;;kBAMwBA,U;;AANxB;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,cAAc,IAAIC,GAAJ,CAAQ,CAAC,QAAD,EAAW,SAAX,CAAR,CAApB;;AAEe,SAASF,UAAT,CAAoBG,KAApB,EAA2B;AACxC,MAAIC,YAAYD,MAAME,OAAN,CAAcD,SAA9B;AACA,MAAI,CAACA,SAAL,EAAgB;AACdA,gBAAYH,YAAYK,GAAZ,CAAgBH,MAAMI,MAAN,CAAaC,IAA7B,IAAqC,QAArC,GAAgDL,MAAMK,IAAlE;AACD;AACD,SACE;AACE,kBAAcL,MAAME,OAAN,CAAcI,YAD9B;AAEE,UAAML,SAFR;AAGE,QAAID,MAAMO,EAHZ;AAIE,UAAMP,MAAMO,EAJd;AAKE,cAAUP,MAAMQ,QALlB;AAME,eAAWR,MAAMI,MAAN,CAAaK,SAN1B;AAOE,eAAW,0BAAWT,MAAME,OAAN,CAAcQ,gBAAzB,CAPb;AAQE,WAAO,OAAOV,MAAMW,KAAb,KAAuB,WAAvB,GAAqC,EAArC,GAA0CX,MAAMW,KARzD;AASE,YAAQ;AAAA,aAAMX,MAAMY,MAAN,CAAaZ,MAAMO,EAAnB,CAAN;AAAA,KATV;AAUE,cAAU,kBAACM,KAAD;AAAA,aAAWb,MAAMc,QAAN,CAAeD,MAAME,MAAN,CAAaJ,KAAb,GAAqBE,MAAME,MAAN,CAAaJ,KAAlC,GAA0CK,SAAzD,CAAX;AAAA,KAVZ,GADF;AAaD;AACDnB,WAAWoB,SAAX,GAAuB;AACrB;;;AAGAf,WAASgB,oBAAUC,KAAV,CAAgB;AACvB;;;AAGAb,kBAAcY,oBAAUE;AAJD,GAAhB;AAJY,CAAvB;;AAYAvB,WAAWwB,YAAX,GAA0B;AACxBnB,WAAS,EADe;AAExBG,QAAM;AAFkB,CAA1B","file":"TextWidget.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst numberTypes = new Set(['number', 'integer']);\n\nexport default function TextWidget(props) {\n  let inputType = props.options.inputType;\n  if (!inputType) {\n    inputType = numberTypes.has(props.schema.type) ? 'number' : props.type;\n  }\n  return (\n    <input\n      autoComplete={props.options.autocomplete}\n      type={inputType}\n      id={props.id}\n      name={props.id}\n      disabled={props.disabled}\n      maxLength={props.schema.maxLength}\n      className={classnames(props.options.widgetClassNames)}\n      value={typeof props.value === 'undefined' ? '' : props.value}\n      onBlur={() => props.onBlur(props.id)}\n      onChange={(event) => props.onChange(event.target.value ? event.target.value : undefined)}/>\n  );\n}\nTextWidget.propTypes = {\n  /**\n   * ui:options from uiSchema\n   */\n  options: PropTypes.shape({\n    /*\n    * input's autocomplete attribute value\n    */\n    autocomplete: PropTypes.string\n  }),\n};\n\nTextWidget.defaultProps = {\n  options: {},\n  type: 'text'\n};\n"]}