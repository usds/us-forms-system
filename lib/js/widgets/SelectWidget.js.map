{"version":3,"sources":["../../../src/js/widgets/SelectWidget.jsx"],"names":["processValue","value","type","undefined","getValue","event","target","SelectWidget","schema","id","options","required","disabled","readonly","multiple","onChange","onBlur","placeholder","enumOptions","labels","widgetClassNames","newValue","default","map","option","i","label"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,SAASA,YAAT,OAAgCC,KAAhC,EAAuC;AAAA,MAAfC,IAAe,QAAfA,IAAe;;AACrC,MAAIA,SAAS,SAAb,EAAwB;AACtB,WAAOD,UAAU,MAAjB;AACD,GAFD,MAEO,IAAIC,SAAS,QAAb,EAAuB;AAC5B,WAAO,qBAASD,KAAT,CAAP;AACD;AACD,SAAOA,UAAU,EAAV,GAAeE,SAAf,GAA2BF,KAAlC;AACD;;AAED,SAASG,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAOA,MAAMC,MAAN,CAAaL,KAApB;AACD;;AAED,SAASM,YAAT,QAYG;AAAA,MAXDC,MAWC,SAXDA,MAWC;AAAA,MAVDC,EAUC,SAVDA,EAUC;AAAA,MATDC,OASC,SATDA,OASC;AAAA,MARDT,KAQC,SARDA,KAQC;AAAA,MAPDU,QAOC,SAPDA,QAOC;AAAA,MANDC,QAMC,SANDA,QAMC;AAAA,MALDC,QAKC,SALDA,QAKC;AAAA,MAJDC,QAIC,SAJDA,QAIC;AAAA,MAHDC,SAGC,SAHDA,QAGC;AAAA,MAFDC,OAEC,SAFDA,MAEC;AAAA,MADDC,WACC,SADDA,WACC;AAAA,MACOC,WADP,GACoCR,OADpC,CACOQ,WADP;AAAA,wBACoCR,OADpC,CACoBS,MADpB;AAAA,MACoBA,MADpB,mCAC6B,EAD7B;;AAED,SACE;AAAA;AAAA;AACE,UAAIV,EADN;AAEE,YAAMA,EAFR;AAGE,gBAAUK,QAHZ;AAIE,iBAAWJ,QAAQU,gBAJrB;AAKE,aAAOnB,SAAS,EALlB;AAME,gBAAUU,QANZ;AAOE,gBAAUC,QAPZ;AAQE,gBAAUC,QARZ;AASE,cAAQ,gBAACR,KAAD,EAAW;AACjB,YAAMgB,WAAWjB,SAASC,KAAT,EAAgBS,QAAhB,CAAjB;AACAE,gBAAOP,EAAP,EAAWT,aAAaQ,MAAb,EAAqBa,QAArB,CAAX;AACD,OAZH;AAaE,gBAAU,kBAAChB,KAAD,EAAW;AACnB,YAAMgB,WAAWjB,SAASC,KAAT,EAAgBS,QAAhB,CAAjB;AACAC,kBAASf,aAAaQ,MAAb,EAAqBa,QAArB,CAAT;AACD,OAhBH;AAiBG,KAACb,OAAOc,OAAR,IAAmB;AAAA;AAAA,QAAQ,OAAM,EAAd;AAAkBL;AAAlB,KAjBtB;AAkBGC,gBAAYK,GAAZ,CAAgB,UAACC,MAAD,EAASC,CAAT,EAAe;AAC9B,aAAO;AAAA;AAAA,UAAQ,KAAKA,CAAb,EAAgB,OAAOD,OAAOvB,KAA9B;AAAsCkB,eAAOK,OAAOvB,KAAd,KAAwBuB,OAAOE;AAArE,OAAP;AACD,KAFA;AAlBH,GADF;AAwBD;;kBAEc,iCAAkB,CAC/B,IAD+B,EAE/B,OAF+B,EAG/B,QAH+B,CAAlB,EAIZnB,YAJY,C","file":"SelectWidget.js","sourcesContent":["import React from 'react';\nimport { asNumber } from '@department-of-veterans-affairs/react-jsonschema-form/lib/utils';\nimport onlyUpdateForKeys from 'recompose/onlyUpdateForKeys';\n\nfunction processValue({ type }, value) {\n  if (type === 'boolean') {\n    return value === 'true';\n  } else if (type === 'number') {\n    return asNumber(value);\n  }\n  return value === '' ? undefined : value;\n}\n\nfunction getValue(event) {\n  return event.target.value;\n}\n\nfunction SelectWidget({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple,\n  onChange,\n  onBlur,\n  placeholder\n}) {\n  const { enumOptions, labels = {} } = options;\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className={options.widgetClassNames}\n      value={value || ''}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      onBlur={(event) => {\n        const newValue = getValue(event, multiple);\n        onBlur(id, processValue(schema, newValue));\n      }}\n      onChange={(event) => {\n        const newValue = getValue(event, multiple);\n        onChange(processValue(schema, newValue));\n      }}>\n      {!schema.default && <option value=\"\">{placeholder}</option>}\n      {enumOptions.map((option, i) => {\n        return <option key={i} value={option.value}>{labels[option.value] || option.label}</option>;\n      })\n      }</select>\n  );\n}\n\nexport default onlyUpdateForKeys([\n  'id',\n  'value',\n  'schema',\n])(SelectWidget);\n"]}