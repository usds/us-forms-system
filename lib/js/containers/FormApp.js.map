{"version":3,"sources":["../../../src/js/containers/FormApp.jsx"],"names":["Element","Scroll","FormApp","additionalRoutes","props","formConfig","nonFormPages","map","route","path","window","History","scrollRestoration","currentLocation","children","formData","trimmedPathname","pathname","replace","lastPathComponent","split","pop","isIntroductionPage","endsWith","isNonFormPage","includes","Footer","footerContent","formTitle","formNav","renderedChildren","title","subTitle","footer","React","Component","mapStateToProps","state","form","data"],"mappings":";;;;;;;;;AAAA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,UAAUC,sBAAOD,OAAvB;;AAEA;;;;IAGME,O;;;;;;;;;;;yCACiB;AAAA,UACXC,gBADW,GACU,KAAKC,KAAL,CAAWC,UADrB,CACXF,gBADW;;AAEnB,WAAKG,YAAL,GAAoB,EAApB;AACA,UAAIH,gBAAJ,EAAsB;AACpB,aAAKG,YAAL,GAAoBH,iBAAiBI,GAAjB,CAAqB;AAAA,iBAASC,MAAMC,IAAf;AAAA,SAArB,CAApB;AACD;AACD;;AAEA,UAAIC,OAAOC,OAAX,EAAoB;AAClBD,eAAOC,OAAP,CAAeC,iBAAf,GAAmC,QAAnC;AACD;AACF;;;6BAEQ;AAAA,mBACqD,KAAKR,KAD1D;AAAA,UACCS,eADD,UACCA,eADD;AAAA,UACkBR,UADlB,UACkBA,UADlB;AAAA,UAC8BS,QAD9B,UAC8BA,QAD9B;AAAA,UACwCC,QADxC,UACwCA,QADxC;;AAEP,UAAMC,kBAAkBH,gBAAgBI,QAAhB,CAAyBC,OAAzB,CAAiC,KAAjC,EAAwC,EAAxC,CAAxB;AACA,UAAMC,oBAAoBN,gBAAgBI,QAAhB,CAAyBG,KAAzB,CAA+B,GAA/B,EAAoCC,GAApC,EAA1B;AACA,UAAMC,qBAAqBN,gBAAgBO,QAAhB,CAAyB,cAAzB,CAA3B;AACA,UAAMC,gBAAgB,KAAKlB,YAAL,CAAkBmB,QAAlB,CAA2BN,iBAA3B,CAAtB;AACA,UAAMO,SAASrB,WAAWsB,aAA1B;;AAEA,UAAIC,kBAAJ;AACA,UAAIC,gBAAJ;AACA,UAAIC,mBAAmBhB,QAAvB;AACA,UAAI,CAACQ,kBAAD,IAAuB,CAACE,aAA5B,EAA2C;AACzC;AACA;AACA;AACA;AACA,YAAInB,WAAW0B,KAAf,EAAsB;AACpBH,sBAAY,8BAAC,mBAAD,IAAW,OAAOvB,WAAW0B,KAA7B,EAAoC,UAAU1B,WAAW2B,QAAzD,GAAZ;AACD;AACF;;AAED;AACA;AACA;AACA,UAAI,CAACR,aAAD,IAAkB,2BAAaR,eAAb,CAAtB,EAAqD;AACnDa,kBAAU,8BAAC,iBAAD,IAAS,UAAUd,QAAnB,EAA6B,YAAYV,UAAzC,EAAqD,aAAaW,eAAlE,GAAV;;AAEAc,2BACE;AAAA;AAAA,YAAK,WAAU,sCAAf;AACGhB;AADH,SADF;AAKD;;AAED,UAAImB,eAAJ;AACA,UAAIP,MAAJ,EAAY;AACVO,iBACE,8BAAC,MAAD;AACE,sBAAY5B,UADd;AAEE,2BAAiBQ,eAFnB,GADF;AAKD;;AAED,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAK,WAAU,KAAf;AACE;AAAA;AAAA,cAAK,WAAU,uCAAf;AACE,0CAAC,OAAD,IAAS,MAAK,kBAAd,GADF;AAEGe,qBAFH;AAGGC,mBAHH;AAIGC;AAJH;AADF,SADF;AASGG,cATH;AAUE,gDAAM,WAAU,yBAAhB,EAA0C,iBAAejB,eAAzD,EAA0E,YAA1E;AAVF,OADF;AAcD;;;;EAvEmBkB,gBAAMC,S;;AA0E5B,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCtB,cAAUsB,MAAMC,IAAN,CAAWC;AADa,GAAZ;AAAA,CAAxB;;kBAIe,yBAAQH,eAAR,EAAyBlC,OAAzB,C;QAENA,O,GAAAA,O","file":"FormApp.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Scroll from 'react-scroll';\n\nimport FormNav from '../components/FormNav';\nimport FormTitle from '../components/FormTitle';\nimport { isInProgress } from '../helpers';\nimport { setGlobalScroll } from '../utilities/ui';\n\nconst Element = Scroll.Element;\n\n/*\n * Primary component for a schema generated form app.\n */\nclass FormApp extends React.Component {\n  componentWillMount() {\n    const { additionalRoutes } = this.props.formConfig;\n    this.nonFormPages = [];\n    if (additionalRoutes) {\n      this.nonFormPages = additionalRoutes.map(route => route.path);\n    }\n    setGlobalScroll();\n\n    if (window.History) {\n      window.History.scrollRestoration = 'manual';\n    }\n  }\n\n  render() {\n    const { currentLocation, formConfig, children, formData } = this.props;\n    const trimmedPathname = currentLocation.pathname.replace(/\\/$/, '');\n    const lastPathComponent = currentLocation.pathname.split('/').pop();\n    const isIntroductionPage = trimmedPathname.endsWith('introduction');\n    const isNonFormPage = this.nonFormPages.includes(lastPathComponent);\n    const Footer = formConfig.footerContent;\n\n    let formTitle;\n    let formNav;\n    let renderedChildren = children;\n    if (!isIntroductionPage && !isNonFormPage) {\n      // Show title only if:\n      // 1. we're not on the intro page *or* one of the additionalRoutes\n      //    specified in the form config\n      // 2. there is a title specified in the form config\n      if (formConfig.title) {\n        formTitle = <FormTitle title={formConfig.title} subTitle={formConfig.subTitle}/>;\n      }\n    }\n\n    // Show nav only if we're not on the intro, form-saved, error, confirmation\n    // page or on of the additionalRoutes specified in the form config\n    // Also add form classes only if on an actual form page\n    if (!isNonFormPage && isInProgress(trimmedPathname)) {\n      formNav = <FormNav formData={formData} formConfig={formConfig} currentPath={trimmedPathname}/>;\n\n      renderedChildren = (\n        <div className=\"progress-box progress-box-schemaform\">\n          {children}\n        </div>\n      );\n    }\n\n    let footer;\n    if (Footer) {\n      footer = (\n        <Footer\n          formConfig={formConfig}\n          currentLocation={currentLocation}/>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"usa-width-two-thirds medium-8 columns\">\n            <Element name=\"topScrollElement\"/>\n            {formTitle}\n            {formNav}\n            {renderedChildren}\n          </div>\n        </div>\n        {footer}\n        <span className=\"js-test-location hidden\" data-location={trimmedPathname} hidden></span>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  formData: state.form.data\n});\n\nexport default connect(mapStateToProps)(FormApp);\n\nexport { FormApp };\n"]}