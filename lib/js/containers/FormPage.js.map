{"version":3,"sources":["../../../src/js/containers/FormPage.jsx"],"names":["focusForm","scroller","Scroll","scrollToTop","scrollTo","window","Forms","scroll","duration","delay","smooth","FormPage","onChange","formData","newData","props","route","pageConfig","showPagePerItem","arrayPath","params","index","form","data","setData","onPageChange","blockScrollOnMount","prevProps","pageKey","formContext","pages","schema","uiSchema","properties","items","title","undefined","uploadFile","onSubmit","React","Component","mapStateToProps","state","user","mapDispatchToProps","propTypes","PropTypes","object","isRequired","shape","string","pageList","arrayOf","path","contentAfterButtons","element","func"],"mappings":"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","file":"FormPage.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\n// import { withRouter } from 'react-router';\nimport Scroll from 'react-scroll';\nimport _ from 'lodash/fp';\n// import classNames from 'classnames';\n\n// import ProgressButton from '../components/ProgressButton';\nimport SchemaForm from '../components/SchemaForm';\nimport { setData, uploadFile } from '../actions';\n// import { getNextPagePath, getPreviousPagePath } from '../routing';\nimport { focusElement } from '../utilities/ui';\n\nfunction focusForm() {\n  focusElement('.nav-header');\n}\n\nconst scroller = Scroll.scroller;\nconst scrollToTop = () => {\n  scroller.scrollTo('topScrollElement', window.Forms.scroll || {\n    duration: 500,\n    delay: 0,\n    smooth: true,\n  });\n};\n\nclass FormPage extends React.Component {\n  componentDidMount() {\n    if (!this.props.blockScrollOnMount) {\n      scrollToTop();\n      focusForm();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.route.pageConfig.pageKey !== this.props.route.pageConfig.pageKey ||\n      _.get('params.index', prevProps) !== _.get('params.index', this.props)) {\n      scrollToTop();\n      focusForm();\n    }\n  }\n\n  onChange = (formData) => {\n    let newData = formData;\n    if (this.props.route.pageConfig.showPagePerItem) {\n      // If this is a per item page, the formData object will have data for a particular\n      // row in an array, so we need to update the full form data object and then call setData\n      newData = _.set([this.props.route.pageConfig.arrayPath, this.props.params.index], formData, this.props.form.data);\n    }\n    this.props.setData(newData);\n    this.props.onPageChange(newData);\n  }\n\n  render() {\n    const {\n      route,\n      params,\n      form,\n      // contentAfterButtons,\n      formContext\n    } = this.props;\n\n    let {\n      schema,\n      uiSchema\n    } = form.pages[route.pageConfig.pageKey];\n\n    // const pageClasses = classNames('form-panel', route.pageConfig.pageClass);\n    let data = form.data;\n\n    if (route.pageConfig.showPagePerItem) {\n      // Instead of passing through the schema/uiSchema to SchemaForm, the\n      // current item schema for the array at arrayPath is pulled out of the page state and passed\n      schema = schema.properties[route.pageConfig.arrayPath].items[params.index];\n      // Similarly, the items uiSchema and the data for just that particular item are passed\n      uiSchema = uiSchema[route.pageConfig.arrayPath].items;\n      // And the data should be for just the item in the array\n      data = _.get([route.pageConfig.arrayPath, params.index], data);\n    }\n    // It should be \"safe\" to check that this is the first page because it is\n    // always eligible and enabled, no need to call getPreviousPagePath.\n    // const isFirstRoutePage = route.pageList[0].path === this.props.location.pathname;\n\n    return (\n      <SchemaForm\n        name={route.pageConfig.pageKey}\n        title={route.pageConfig.title}\n        data={data}\n        schema={schema}\n        uiSchema={uiSchema}\n        pagePerItemIndex={params ? params.index : undefined}\n        formContext={formContext}\n        uploadFile={this.props.uploadFile}\n        onChange={this.onChange}\n        onSubmit={this.props.onSubmit}/>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    form: state.form,\n    user: state.user\n  };\n}\n\nconst mapDispatchToProps = {\n  setData,\n  uploadFile\n};\n\nFormPage.propTypes = {\n  form: PropTypes.object.isRequired,\n  route: PropTypes.shape({\n    pageConfig: PropTypes.shape({\n      pageKey: PropTypes.string.isRequired,\n      schema: PropTypes.object.isRequired,\n      uiSchema: PropTypes.object.isRequired\n    }),\n    pageList: PropTypes.arrayOf(PropTypes.shape({\n      path: PropTypes.string.isRequired\n    }))\n  }),\n  contentAfterButtons: PropTypes.element,\n  setData: PropTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormPage);\n\nexport { FormPage };\n"]}