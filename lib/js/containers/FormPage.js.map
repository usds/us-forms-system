{"version":3,"sources":["../../../src/js/containers/FormPage.jsx"],"names":["focusForm","scroller","Scroll","scrollToTop","scrollTo","window","Forms","scroll","duration","delay","smooth","FormPage","onChange","formData","newData","props","route","pageConfig","showPagePerItem","arrayPath","params","index","form","data","setData","onSubmit","location","path","pageList","pathname","router","push","goBack","blockScrollOnMount","prevProps","pageKey","contentAfterButtons","formContext","pages","schema","uiSchema","pageClasses","pageClass","properties","items","isFirstRoutePage","title","undefined","uploadFile","React","Component","mapStateToProps","state","user","mapDispatchToProps","propTypes","PropTypes","object","isRequired","shape","string","arrayOf","element","func"],"mappings":"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","file":"FormPage.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Scroll from 'react-scroll';\nimport _ from 'lodash/fp';\nimport classNames from 'classnames';\n\nimport ProgressButton from '../components/ProgressButton';\nimport SchemaForm from '../components/SchemaForm';\nimport { setData, uploadFile } from '../actions';\nimport { getNextPagePath, getPreviousPagePath } from '../routing';\nimport { focusElement } from '../utilities/ui';\n\nfunction focusForm() {\n  focusElement('.nav-header');\n}\n\nconst scroller = Scroll.scroller;\nconst scrollToTop = () => {\n  scroller.scrollTo('topScrollElement', window.Forms.scroll || {\n    duration: 500,\n    delay: 0,\n    smooth: true,\n  });\n};\n\nclass FormPage extends React.Component {\n  componentDidMount() {\n    if (!this.props.blockScrollOnMount) {\n      scrollToTop();\n      focusForm();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.route.pageConfig.pageKey !== this.props.route.pageConfig.pageKey ||\n      _.get('params.index', prevProps) !== _.get('params.index', this.props)) {\n      scrollToTop();\n      focusForm();\n    }\n  }\n\n  onChange = (formData) => {\n    let newData = formData;\n    if (this.props.route.pageConfig.showPagePerItem) {\n      // If this is a per item page, the formData object will have data for a particular\n      // row in an array, so we need to update the full form data object and then call setData\n      newData = _.set([this.props.route.pageConfig.arrayPath, this.props.params.index], formData, this.props.form.data);\n    }\n    this.props.setData(newData);\n  }\n\n  onSubmit = ({ formData }) => {\n    const { form, params, route, location } = this.props;\n\n    // This makes sure defaulted data on a page with no changes is saved\n    // Probably safe to do this for regular pages, too, but it hasn’t been necessary\n    if (route.pageConfig.showPagePerItem) {\n      const newData = _.set([route.pageConfig.arrayPath, params.index], formData, form.data);\n      this.props.setData(newData);\n    }\n\n    const path = getNextPagePath(route.pageList, form.data, location.pathname);\n\n    this.props.router.push(path);\n  }\n\n  goBack = () => {\n    const { form, route: { pageList }, location } = this.props;\n    const path = getPreviousPagePath(pageList, form.data, location.pathname);\n\n    this.props.router.push(path);\n  }\n\n  render() {\n    const {\n      route,\n      params,\n      form,\n      contentAfterButtons,\n      formContext\n    } = this.props;\n\n    let {\n      schema,\n      uiSchema\n    } = form.pages[route.pageConfig.pageKey];\n\n    const pageClasses = classNames('form-panel', route.pageConfig.pageClass);\n    let data = form.data;\n\n    if (route.pageConfig.showPagePerItem) {\n      // Instead of passing through the schema/uiSchema to SchemaForm, the\n      // current item schema for the array at arrayPath is pulled out of the page state and passed\n      schema = schema.properties[route.pageConfig.arrayPath].items[params.index];\n      // Similarly, the items uiSchema and the data for just that particular item are passed\n      uiSchema = uiSchema[route.pageConfig.arrayPath].items;\n      // And the data should be for just the item in the array\n      data = _.get([route.pageConfig.arrayPath, params.index], data);\n    }\n    // It should be \"safe\" to check that this is the first page because it is\n    // always eligible and enabled, no need to call getPreviousPagePath.\n    const isFirstRoutePage = route.pageList[0].path === this.props.location.pathname;\n\n    return (\n      <div className={pageClasses}>\n        <SchemaForm\n          name={route.pageConfig.pageKey}\n          title={route.pageConfig.title}\n          data={data}\n          schema={schema}\n          uiSchema={uiSchema}\n          pagePerItemIndex={params ? params.index : undefined}\n          formContext={formContext}\n          uploadFile={this.props.uploadFile}\n          onChange={this.onChange}\n          onSubmit={this.onSubmit}>\n          <div className=\"row form-progress-buttons schemaform-buttons\">\n            <div className=\"small-6 medium-5 columns\">\n              { !isFirstRoutePage &&\n                <ProgressButton\n                  onButtonClick={this.goBack}\n                  buttonText=\"Back\"\n                  buttonClass=\"usa-button-secondary\"\n                  beforeText=\"«\"/> }\n            </div>\n            <div className=\"small-6 medium-5 end columns\">\n              <ProgressButton\n                submitButton\n                buttonText=\"Continue\"\n                buttonClass=\"usa-button-primary\"\n                afterText=\"»\"/>\n            </div>\n          </div>\n          {contentAfterButtons}\n        </SchemaForm>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    form: state.form,\n    user: state.user\n  };\n}\n\nconst mapDispatchToProps = {\n  setData,\n  uploadFile\n};\n\nFormPage.propTypes = {\n  form: PropTypes.object.isRequired,\n  route: PropTypes.shape({\n    pageConfig: PropTypes.shape({\n      pageKey: PropTypes.string.isRequired,\n      schema: PropTypes.object.isRequired,\n      uiSchema: PropTypes.object.isRequired\n    }),\n    pageList: PropTypes.arrayOf(PropTypes.shape({\n      path: PropTypes.string.isRequired\n    }))\n  }),\n  contentAfterButtons: PropTypes.element,\n  setData: PropTypes.func\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(FormPage));\n\nexport { FormPage };\n"]}