{"version":3,"sources":["../../../../src/js/utilities/data/deconstructPath.js"],"names":["deconstructPath","coerceNumber","e","num","parseInt","path","arrayPath","split","filter","map"],"mappings":";;;;;kBAawBA,e;AAbxB;AACA,SAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,MAAMC,MAAMC,SAASF,CAAT,EAAY,EAAZ,CAAZ;AACA,SAAOA,WAASC,GAAT,GAAiBA,GAAjB,GAAuBD,CAA9B;AACD;;AAED;;;;;;;AAOe,SAASF,eAAT,CAAyBK,IAAzB,EAA+B;AAC5C,MAAMC,YAAYD,KACfE,KADe,CACT,QADS,EAEfC,MAFe,CAER;AAAA,WAAKN,MAAM,EAAX;AAAA,GAFQ,EAGfO,GAHe,CAGXR,YAHW,CAAlB;;AAKA,SAAOK,SAAP;AACD","file":"deconstructPath.js","sourcesContent":["// Coerce to numbers where applicable\nfunction coerceNumber(e) {\n  const num = parseInt(e, 10);\n  return e === `${num}` ? num : e;\n}\n\n/**\n * Takes a string and casts it into an array.\n * Can take strings like a.b[4].c\n *\n * @param {string} path\n * @return {Array}\n */\nexport default function deconstructPath(path) {\n  const arrayPath = path\n    .split(/[.[\\]]/)\n    .filter(e => e !== '')\n    .map(coerceNumber);\n\n  return arrayPath;\n}\n"]}