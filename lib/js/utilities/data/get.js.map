{"version":3,"sources":["../../../../src/js/utilities/data/get.js"],"names":["get","path","object","defaultValue","arrayPath","Array","isArray","currentValue","reduce","current","next"],"mappings":";;;;;kBAewBA,G;;AAfxB;;;;AACA;;;;;;AAEA;;;;;;;;;;;;AAYe,SAASA,GAAT,CAAaC,IAAb,EAAmBC,MAAnB,EAA2BC,YAA3B,EAAyC;AACtD,MAAMC,YAAYC,MAAMC,OAAN,CAAcL,IAAd,IAAsBA,IAAtB,GAA6B,+BAAgBA,IAAhB,CAA/C;AACA,gCAAeG,SAAf;AACA,MAAMG,eAAeH,UAAUI,MAAV,CAAiB,UAACC,OAAD,EAAUC,IAAV,EAAmB;AACvD,WAAO,OAAOD,OAAP,KAAmB,WAAnB,GAAiCA,OAAjC,GAA2CA,QAAQC,IAAR,CAAlD;AACD,GAFoB,EAElBR,MAFkB,CAArB;;AAIA;AACA,SAAQ,OAAOK,YAAP,KAAwB,WAAzB,GAAwCA,YAAxC,GAAuDJ,YAA9D;AACD","file":"get.js","sourcesContent":["import deconstructPath from './deconstructPath';\nimport checkValidPath from './checkValidPath';\n\n/**\n * Gets a the value at the end of the path.\n *\n * Note: This function does not return a clone of this value, so if the return\n *  result of this function is an object, modifying it will also change the original\n *  object it was grabbed from.\n *\n * @param {Object} object\n * @param {Array|string} path\n * @param {*} [defaultValue]\n * @return {*}\n */\nexport default function get(path, object, defaultValue) {\n  const arrayPath = Array.isArray(path) ? path : deconstructPath(path);\n  checkValidPath(arrayPath);\n  const currentValue = arrayPath.reduce((current, next) => {\n    return typeof current === 'undefined' ? current : current[next];\n  }, object);\n\n  // Should this clone? the current value? It might use a different ref--not sure.\n  return (typeof currentValue !== 'undefined') ? currentValue : defaultValue;\n}\n\n"]}