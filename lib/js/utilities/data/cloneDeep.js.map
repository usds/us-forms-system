{"version":3,"sources":["../../../../src/js/utilities/data/cloneDeep.js"],"names":["cloneDeep","object","newObj","cloneArrayElement","e","Object","keys","forEach","Array","isArray","key","slice","map"],"mappings":";;;;;;;;kBAWwBA,S;;AAXxB;;;;;;AAEA;;;;;;;;;AASe,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACxC,MAAMC,SAAS,qBAAMD,MAAN,CAAf;;AAEA,MAAME,oBAAoB,SAApBA,iBAAoB,IAAK;AAC7B;AACA,QAAI,QAAOC,CAAP,yCAAOA,CAAP,OAAa,QAAb,IAAyBA,MAAM,IAAnC,EAAyC;AACvC,aAAOJ,UAAUI,CAAV,CAAP;AACD;;AAED,WAAOA,CAAP;AACD,GAPD;;AASAC,SAAOC,IAAP,CAAYJ,MAAZ,EAAoBK,OAApB,CAA4B,eAAO;AACjC,QAAIC,MAAMC,OAAN,CAAcP,OAAOQ,GAAP,CAAd,CAAJ,EAAgC;AAC9BR,aAAOQ,GAAP,IAAcR,OAAOQ,GAAP,EAAYC,KAAZ,GAAoBC,GAApB,CAAwBT,iBAAxB,CAAd;AACD,KAFD,MAEO,IAAI,QAAOD,OAAOQ,GAAP,CAAP,MAAuB,QAA3B,EAAqC;AAC1CR,aAAOQ,GAAP,IAAcV,UAAUE,OAAOQ,GAAP,CAAV,CAAd;AACD;AACF,GAND;;AAQA,SAAOR,MAAP;AACD","file":"cloneDeep.js","sourcesContent":["import clone from './clone';\n\n/**\n * Deeply clones an object. It's probably not super performant on deeply nested objects, but\n *  it gets the job done for now.\n *\n * Functions retain the same reference, but their `this` context changes like we'd expect.\n *\n * @param {Array|Object} object\n * @return {Object}\n */\nexport default function cloneDeep(object) {\n  const newObj = clone(object);\n\n  const cloneArrayElement = e => {\n    // Deep clones arrays and objects\n    if (typeof e === 'object' && e !== null) {\n      return cloneDeep(e);\n    }\n\n    return e;\n  };\n\n  Object.keys(newObj).forEach(key => {\n    if (Array.isArray(newObj[key])) {\n      newObj[key] = newObj[key].slice().map(cloneArrayElement);\n    } else if (typeof newObj[key] === 'object') {\n      newObj[key] = cloneDeep(newObj[key]);\n    }\n  });\n\n  return newObj;\n}\n\n"]}