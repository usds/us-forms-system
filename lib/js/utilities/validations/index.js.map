{"version":3,"sources":["../../../../src/js/utilities/validations/index.js"],"names":["isValidSSN","isValidYear","isValidPartialDate","isValidCurrentOrPastDate","isValidCurrentOrPastYear","isValidCurrentOrFutureMonthYear","parseDateField","isValidDateRange","isValidRoutingNumber","isValidPartialMonthYear","isValidPartialMonthYearInPast","value","test","noBadSameDigitNumber","every","sameDigitRegex","RegExp","i","Number","Date","day","month","year","date","today","currentYear","isBlank","isBlankDateField","field","dateField","fromDateField","toDateField","fromDate","toDate","digits","split","map","parseInt","val","weighted","Error","isSameOrBefore"],"mappings":"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","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport {\n  addYears,\n  isSameDay,\n  isBefore,\n  isSameMonth,\n  isAfter,\n  getYear\n} from 'date-fns';\n\n// Conditions for valid SSN from the original 1010ez pdf form:\n// '123456789' is not a valid SSN\n// A value where the first 3 digits are 0 is not a valid SSN\n// A value where the 4th and 5th digits are 0 is not a valid SSN\n// A value where the last 4 digits are 0 is not a valid SSN\n// A value with 3 digits, an optional -, 2 digits, an optional -, and 4 digits is a valid SSN\n// 9 of the same digits (e.g., '111111111') is not a valid SSN\nexport function isValidSSN(value) {\n  if (value === '123456789' || value === '123-45-6789') {\n    return false;\n  } else if (/^0{3}-?\\d{2}-?\\d{4}$/.test(value)) {\n    return false;\n  } else if (/^\\d{3}-?0{2}-?\\d{4}$/.test(value)) {\n    return false;\n  } else if (/^\\d{3}-?\\d{2}-?0{4}$/.test(value)) {\n    return false;\n  }\n\n  const noBadSameDigitNumber = _.range(0, 10)\n    .every(i => {\n      const sameDigitRegex = new RegExp(`${i}{3}-?${i}{2}-?${i}{4}`);\n      return !sameDigitRegex.test(value);\n    });\n\n  if (!noBadSameDigitNumber) {\n    return false;\n  }\n\n  return /^\\d{9}$/.test(value) || /^\\d{3}-\\d{2}-\\d{4}$/.test(value);\n}\n\nexport function isValidYear(value) {\n  return Number(value) >= 1900 && Number(value) <= getYear(addYears(new Date(), 100));\n}\n\nexport function isValidPartialDate(day, month, year) {\n  if (year && !isValidYear(year)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function isValidCurrentOrPastDate(day, month, year) {\n  const date = new Date(year, month - 1, day);\n  const today = new Date();\n  return isSameDay(date, today) || isBefore(date, today);\n}\n\nexport function isValidCurrentOrPastYear(value) {\n  const currentYear = getYear(new Date());\n  return Number(value) >= 1900 && Number(value) <= currentYear;\n}\n\nexport function isValidCurrentOrFutureMonthYear(month, year) {\n  const date = new Date(year, month - 1);\n  const today = new Date();\n  return isSameMonth(date, today) || isAfter(date, today);\n}\n\nfunction isBlank(value) {\n  return value === '';\n}\n\nfunction isBlankDateField(field) {\n  return isBlank(field.day.value) && isBlank(field.month.value) && isBlank(field.year.value);\n}\n\nexport function parseDateField(dateField) {\n  const year = dateField.year.value;\n  const month = dateField.month.value || null;\n  const day = dateField.day.value || null;\n  return new Date(year, month - 1, day);\n}\n\nexport function isValidDateRange(fromDateField, toDateField) {\n  if (isBlankDateField(toDateField) || isBlankDateField(fromDateField)) {\n    return true;\n  }\n  const fromDate = parseDateField(fromDateField);\n  const toDate = parseDateField(toDateField);\n  return fromDate <= toDate;\n}\n\n// Pulled from https://en.wikipedia.org/wiki/Routing_transit_number#Check_digit\nexport function isValidRoutingNumber(value) {\n  if (/^\\d{9}$/.test(value)) {\n    const digits = value.split('').map(val => parseInt(val, 10));\n    const weighted =\n      3 * (digits[0] + digits[3] + digits[6]) +\n      7 * (digits[1] + digits[4] + digits[7]) +\n      (digits[2] + digits[5] + digits[8]);\n\n    return (weighted % 10) === 0;\n  }\n  return false;\n}\n\nexport function isValidPartialMonthYear(month, year) {\n  if (typeof month === 'object') {\n    throw new Error('Pass a month and a year to function');\n  }\n  if (month && (Number(month) > 12 || Number(month) < 1)) {\n    return false;\n  }\n\n  return isValidPartialDate(null, null, year);\n}\n\nexport function isValidPartialMonthYearInPast(month, year) {\n  if (typeof month === 'object') {\n    throw new Error('Pass a month and a year to function');\n  }\n  const date = new Date(year, month, null);\n  const today = new Date();\n  const isSameOrBefore = (isSameMonth(date, today) || isBefore(date, today));\n  return !year || isValidPartialMonthYear(month, year) && isSameOrBefore;\n}\n"]}