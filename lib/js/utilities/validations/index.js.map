{"version":3,"sources":["../../../../src/js/utilities/validations/index.js"],"names":["isValidSSN","isValidYear","isValidPartialDate","isValidCurrentOrPastDate","isValidCurrentOrPastYear","isValidCurrentOrFutureMonthYear","dateToMoment","isValidDateRange","isValidRoutingNumber","isValidPartialMonthYear","isValidPartialMonthYearInPast","value","test","noBadSameDigitNumber","every","sameDigitRegex","RegExp","i","Number","add","year","day","month","momentDate","parseInt","isSameOrBefore","endOf","isSameOrAfter","isBlank","isBlankDateField","field","dateField","fromDate","toDate","momentStart","momentEnd","digits","split","map","val","weighted","Error","isValid","startOf"],"mappings":"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","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\n\n// Conditions for valid SSN from the original 1010ez pdf form:\n// '123456789' is not a valid SSN\n// A value where the first 3 digits are 0 is not a valid SSN\n// A value where the 4th and 5th digits are 0 is not a valid SSN\n// A value where the last 4 digits are 0 is not a valid SSN\n// A value with 3 digits, an optional -, 2 digits, an optional -, and 4 digits is a valid SSN\n// 9 of the same digits (e.g., '111111111') is not a valid SSN\nexport function isValidSSN(value) {\n  if (value === '123456789' || value === '123-45-6789') {\n    return false;\n  } else if (/^0{3}-?\\d{2}-?\\d{4}$/.test(value)) {\n    return false;\n  } else if (/^\\d{3}-?0{2}-?\\d{4}$/.test(value)) {\n    return false;\n  } else if (/^\\d{3}-?\\d{2}-?0{4}$/.test(value)) {\n    return false;\n  }\n\n  const noBadSameDigitNumber = _.range(0, 10)\n    .every(i => {\n      const sameDigitRegex = new RegExp(`${i}{3}-?${i}{2}-?${i}{4}`);\n      return !sameDigitRegex.test(value);\n    });\n\n  if (!noBadSameDigitNumber) {\n    return false;\n  }\n\n  return /^\\d{9}$/.test(value) || /^\\d{3}-\\d{2}-\\d{4}$/.test(value);\n}\n\nexport function isValidYear(value) {\n  return Number(value) >= 1900 && Number(value) <= moment().add(100, 'year').year();\n}\n\nexport function isValidPartialDate(day, month, year) {\n  if (year && !isValidYear(year)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function isValidCurrentOrPastDate(day, month, year) {\n  const momentDate = moment({ day, month: parseInt(month, 10) - 1, year });\n  return momentDate.isSameOrBefore(moment().endOf('day'), 'day');\n}\n\nexport function isValidCurrentOrPastYear(value) {\n  return Number(value) >= 1900 && Number(value) < moment().year() + 1;\n}\n\nexport function isValidCurrentOrFutureMonthYear(month, year) {\n  const momentDate = moment({ month: parseInt(month, 10) - 1, year });\n  return momentDate.isSameOrAfter(moment(), 'month');\n}\n\nfunction isBlank(value) {\n  return value === '';\n}\n\nfunction isBlankDateField(field) {\n  return isBlank(field.day.value) && isBlank(field.month.value) && isBlank(field.year.value);\n}\n\nexport function dateToMoment(dateField) {\n  return moment({\n    year: dateField.year.value,\n    month: dateField.month.value ? parseInt(dateField.month.value, 10) - 1 : '',\n    day: dateField.day ? dateField.day.value : null\n  });\n}\n\nexport function isValidDateRange(fromDate, toDate) {\n  if (isBlankDateField(toDate) || isBlankDateField(fromDate)) {\n    return true;\n  }\n  const momentStart = dateToMoment(fromDate);\n  const momentEnd = dateToMoment(toDate);\n  return momentStart.isSameOrBefore(momentEnd);\n}\n\n// Pulled from https://en.wikipedia.org/wiki/Routing_transit_number#Check_digit\nexport function isValidRoutingNumber(value) {\n  if (/^\\d{9}$/.test(value)) {\n    const digits = value.split('').map(val => parseInt(val, 10));\n    const weighted =\n      3 * (digits[0] + digits[3] + digits[6]) +\n      7 * (digits[1] + digits[4] + digits[7]) +\n      (digits[2] + digits[5] + digits[8]);\n\n    return (weighted % 10) === 0;\n  }\n  return false;\n}\n\nexport function isValidPartialMonthYear(month, year) {\n  if (typeof month === 'object') {\n    throw new Error('Pass a month and a year to function');\n  }\n  if (month && (Number(month) > 12 || Number(month) < 1)) {\n    return false;\n  }\n\n  return isValidPartialDate(null, null, year);\n}\n\nexport function isValidPartialMonthYearInPast(month, year) {\n  if (typeof month === 'object') {\n    throw new Error('Pass a month and a year to function');\n  }\n  const momentDate = moment({ year, month: month ? parseInt(month, 10) - 1 : null });\n  return !year || isValidPartialMonthYear(month, year) && momentDate.isValid() && momentDate.isSameOrBefore(moment().startOf('month'));\n}\n"]}